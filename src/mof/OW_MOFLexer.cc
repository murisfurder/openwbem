#line 2 "OW_MOFLexer.cc"

#line 4 "OW_MOFLexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE owmofrestart(owmofin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int owmofleng;

extern FILE *owmofin, *owmofout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up owmoftext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up owmoftext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via owmofrestart()), so that the user can continue scanning by
	 * just pointing owmofin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when owmoftext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int owmofleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow owmofwrap()'s to do buffer switches
 * instead of setting up a fresh owmofin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void owmofrestart (FILE *input_file  );
void owmof_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE owmof_create_buffer (FILE *file,int size  );
void owmof_delete_buffer (YY_BUFFER_STATE b  );
void owmof_flush_buffer (YY_BUFFER_STATE b  );
void owmofpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void owmofpop_buffer_state (void );

static void owmofensure_buffer_stack (void );
static void owmof_load_buffer_state (void );
static void owmof_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER owmof_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE owmof_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE owmof_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE owmof_scan_bytes (yyconst char *bytes,int len  );

void *owmofalloc (yy_size_t  );
void *owmofrealloc (void *,yy_size_t  );
void owmoffree (void *  );

#define yy_new_buffer owmof_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        owmofensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            owmof_create_buffer(owmofin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        owmofensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            owmof_create_buffer(owmofin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define owmofwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *owmofin = (FILE *) 0, *owmofout = (FILE *) 0;

typedef int yy_state_type;

extern int owmoflineno;
extern char *owmoftext;
#define yytext_ptr owmoftext
static yyconst flex_int16_t yy_nxt[][67] =
    {
    {
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0
    },

    {
        9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
       19,   10,   20,   21,   22,   23,   24,   25,   26,   26,
       26,   26,   26,   26,   26,   27,   28,   29,   30,   10,

       31,   32,   33,   34,   35,   36,   37,   38,   32,   32,
       39,   32,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   32,   32,   32,   49,   50,   10,   10,   10,   51,
       52,   53,   54,   55,   56,   57,   58
    },

    {
        9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
       19,   10,   20,   21,   22,   23,   24,   25,   26,   26,
       26,   26,   26,   26,   26,   27,   28,   29,   30,   10,
       31,   32,   33,   34,   35,   36,   37,   38,   32,   32,
       39,   32,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   32,   32,   32,   49,   50,   10,   10,   10,   51,

       52,   53,   54,   55,   56,   57,   58
    },

    {
        9,   59,   59,   60,   61,   59,   59,   59,   59,   59,
       59,   62,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59
    },

    {
        9,   59,   59,   60,   61,   59,   59,   59,   59,   59,
       59,   62,   59,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59
    },

    {
        9,   63,   63,   64,   65,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63
    },

    {
        9,   63,   63,   64,   65,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63
    },

    {
        9,   10,   66,   10,   10,   10,   10,   10,   10,   10,

       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   10,   10,   10,   10,   10,   68,
       69,   70,   71,   72,   73,   74,   75
    },

    {
        9,   10,   66,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   67,   67,   67,   67,   67,   67,   67,   67,   67,

       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   10,   10,   10,   10,   10,   68,
       69,   70,   71,   72,   73,   74,   75
    },

    {
       -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,
       -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,
       -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,
       -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,
       -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,
       -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,   -9,
       -9,   -9,   -9,   -9,   -9,   -9,   -9

    },

    {
        9,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,
      -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,
      -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,
      -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,
      -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,
      -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,  -10,
      -10,  -10,  -10,  -10,  -10,  -10,  -10
    },

    {
        9,  -11,   76,  -11,  -11,  -11,  -11,  -11,  -11,  -11,
      -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,
      -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,

      -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,
      -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,
      -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,  -11,
      -11,  -11,  -11,  -11,  -11,  -11,  -11
    },

    {
        9,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
      -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
      -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
      -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
      -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,
      -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,  -12,

      -12,  -12,  -12,  -12,  -12,  -12,  -12
    },

    {
        9,  -13,  -13,   77,  -13,  -13,  -13,  -13,  -13,  -13,
      -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,
      -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,
      -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,
      -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,
      -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,  -13,
      -13,  -13,  -13,  -13,  -13,  -13,  -13
    },

    {
        9,   78,   78,  -14,  -14,   79,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,

       78,   78,   78,   78,   78,   78,   78,   78,   78,   80,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78
    },

    {
        9,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,  -15,   81,  -15,  -15,  -15,  -15,

      -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,  -15,
      -15,  -15,  -15,  -15,  -15,  -15,  -15
    },

    {
        9,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,
      -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,
      -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,
      -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,
      -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,
      -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,  -16,
      -16,  -16,  -16,  -16,  -16,  -16,  -16
    },

    {
        9,   82,   82,  -17,  -17,   82,   82,   82,  -17,   82,

       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   83,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82
    },

    {
        9,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,
      -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,
      -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,
      -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,

      -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,
      -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,  -18,
      -18,  -18,  -18,  -18,  -18,  -18,  -18
    },

    {
        9,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,
      -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,
      -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,
      -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,
      -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,
      -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,  -19,
      -19,  -19,  -19,  -19,  -19,  -19,  -19

    },

    {
        9,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,
      -20,  -20,  -20,  -20,   84,  -20,   85,   86,   87,   87,
       87,   87,   87,   87,   87,  -20,  -20,  -20,  -20,  -20,
      -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,
      -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,
      -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,  -20,
      -20,  -20,  -20,  -20,  -20,  -20,  -20
    },

    {
        9,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,
      -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,
      -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,

      -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,
      -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,
      -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,  -21,
      -21,  -21,  -21,  -21,  -21,  -21,  -21
    },

    {
        9,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,
      -22,  -22,  -22,  -22,  -22,  -22,   88,   88,   88,   88,
       88,   88,   88,   88,   88,  -22,  -22,  -22,  -22,  -22,
      -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,
      -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,
      -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,  -22,

      -22,  -22,  -22,  -22,  -22,  -22,  -22
    },

    {
        9,  -23,  -23,  -23,  -23,  -23,  -23,  -23,  -23,  -23,
      -23,   89,  -23,  -23,  -23,   90,  -23,  -23,  -23,  -23,
      -23,  -23,  -23,  -23,  -23,  -23,  -23,  -23,  -23,  -23,
      -23,  -23,  -23,  -23,  -23,  -23,  -23,  -23,  -23,  -23,
      -23,  -23,  -23,  -23,  -23,  -23,  -23,  -23,  -23,  -23,
      -23,  -23,  -23,  -23,  -23,  -23,  -23,  -23,  -23,  -23,
      -23,  -23,  -23,  -23,  -23,  -23,  -23
    },

    {
        9,  -24,  -24,  -24,  -24,  -24,  -24,  -24,  -24,  -24,
      -24,  -24,  -24,  -24,   84,  -24,   91,   91,   92,   92,

       92,   92,   92,   87,   87,  -24,  -24,  -24,  -24,  -24,
      -24,  -24,  -24,   93,  -24,  -24,  -24,  -24,  -24,  -24,
      -24,  -24,  -24,  -24,  -24,  -24,  -24,  -24,  -24,  -24,
      -24,  -24,   94,  -24,  -24,  -24,  -24,  -24,  -24,  -24,
      -24,  -24,  -24,  -24,  -24,  -24,  -24
    },

    {
        9,  -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,
      -25,  -25,  -25,  -25,   84,  -25,   86,   86,   87,   87,
       87,   87,   87,   87,   87,  -25,  -25,  -25,  -25,  -25,
      -25,  -25,  -25,   93,  -25,  -25,  -25,  -25,  -25,  -25,
      -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,

      -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,  -25,
      -25,  -25,  -25,  -25,  -25,  -25,  -25
    },

    {
        9,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,
      -26,  -26,  -26,  -26,   84,  -26,   87,   87,   87,   87,
       87,   87,   87,   87,   87,  -26,  -26,  -26,  -26,  -26,
      -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,
      -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,
      -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,  -26,
      -26,  -26,  -26,  -26,  -26,  -26,  -26
    },

    {
        9,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,

      -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,
      -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,
      -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,
      -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,
      -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,  -27,
      -27,  -27,  -27,  -27,  -27,  -27,  -27
    },

    {
        9,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,
      -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,
      -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,
      -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,

      -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,
      -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,  -28,
      -28,  -28,  -28,  -28,  -28,  -28,  -28
    },

    {
        9,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,
      -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,
      -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,
      -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,
      -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,
      -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,  -29,
      -29,  -29,  -29,  -29,  -29,  -29,  -29

    },

    {
        9,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,
      -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,
      -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,
      -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,
      -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,
      -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,  -30,
      -30,  -30,  -30,  -30,  -30,  -30,  -30
    },

    {
        9,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,
      -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,
      -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,

      -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,
      -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,
      -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,  -31,
      -31,  -31,  -31,  -31,  -31,  -31,  -31
    },

    {
        9,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,  -32,
      -32,  -32,  -32,  -32,  -32,  -32,   95,   95,   95,   95,
       95,   95,   95,   95,   95,  -32,  -32,  -32,  -32,  -32,
      -32,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,  -32,  -32,  -32,  -32,  -32,   96,

       97,   98,   99,  100,  101,  102,  103
    },

    {
        9,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,  -33,
      -33,  -33,  -33,  -33,  -33,  -33,   95,   95,   95,   95,
       95,   95,   95,   95,   95,  -33,  -33,  -33,  -33,  -33,
      -33,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,  104,   95,   95,   95,   95,  105,   95,
       95,   95,   95,   95,  -33,  -33,  -33,  -33,  -33,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,  -34,
      -34,  -34,  -34,  -34,  -34,  -34,   95,   95,   95,   95,

       95,   95,   95,   95,   95,  -34,  -34,  -34,  -34,  -34,
      -34,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,  106,   95,   95,   95,   95,   95,
       95,   95,   95,   95,  -34,  -34,  -34,  -34,  -34,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,  -35,
      -35,  -35,  -35,  -35,  -35,  -35,   95,   95,   95,   95,
       95,   95,   95,   95,   95,  -35,  -35,  -35,  -35,  -35,
      -35,   95,   95,   95,   95,   95,   95,   95,   95,  107,
       95,  108,   95,   95,   95,   95,   95,   95,   95,   95,

       95,   95,   95,   95,  -35,  -35,  -35,  -35,  -35,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,  -36,
      -36,  -36,  -36,  -36,  -36,  -36,   95,   95,   95,   95,
       95,   95,   95,   95,   95,  -36,  -36,  -36,  -36,  -36,
      -36,   95,  109,   95,   95,   95,   95,   95,   95,   95,
      110,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,  -36,  -36,  -36,  -36,  -36,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,  -37,

      -37,  -37,  -37,  -37,  -37,  -37,   95,   95,   95,   95,
       95,   95,   95,   95,   95,  -37,  -37,  -37,  -37,  -37,
      -37,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,  111,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,  -37,  -37,  -37,  -37,  -37,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,  -38,
      -38,  -38,  -38,  -38,  -38,  -38,   95,   95,   95,   95,
       95,   95,   95,   95,   95,  -38,  -38,  -38,  -38,  -38,
      -38,   95,  112,   95,   95,   95,   95,   95,   95,   95,

       95,  113,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,  -38,  -38,  -38,  -38,  -38,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,  -39,
      -39,  -39,  -39,  -39,  -39,  -39,   95,   95,   95,   95,
       95,   95,   95,   95,   95,  -39,  -39,  -39,  -39,  -39,
      -39,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,  114,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,  -39,  -39,  -39,  -39,  -39,   96,
       97,   98,   99,  100,  101,  102,  103

    },

    {
        9,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,  -40,
      -40,  -40,  -40,  -40,  -40,  -40,   95,   95,   95,   95,
       95,   95,   95,   95,   95,  -40,  -40,  -40,  -40,  -40,
      -40,   95,   95,   95,   95,   95,  115,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,  -40,  -40,  -40,  -40,  -40,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,  -41,
      -41,  -41,  -41,  -41,  -41,  -41,   95,   95,   95,   95,
       95,   95,   95,   95,   95,  -41,  -41,  -41,  -41,  -41,

      -41,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
      116,   95,   95,   95,  -41,  -41,  -41,  -41,  -41,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,  -42,
      -42,  -42,  -42,  -42,  -42,  -42,   95,   95,   95,   95,
       95,   95,   95,   95,   95,  -42,  -42,  -42,  -42,  -42,
      -42,   95,   95,   95,   95,   95,   95,  117,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,  -42,  -42,  -42,  -42,  -42,   96,

       97,   98,   99,  100,  101,  102,  103
    },

    {
        9,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,  -43,
      -43,  -43,  -43,  -43,  -43,  -43,   95,   95,   95,   95,
       95,   95,   95,   95,   95,  -43,  -43,  -43,  -43,  -43,
      -43,   95,  118,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,  119,   95,   95,
       95,   95,   95,   95,  -43,  -43,  -43,  -43,  -43,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,  -44,
      -44,  -44,  -44,  -44,  -44,  -44,   95,   95,   95,   95,

       95,   95,   95,   95,   95,  -44,  -44,  -44,  -44,  -44,
      -44,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
      120,   95,   95,   95,  -44,  -44,  -44,  -44,  -44,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,  -45,
      -45,  -45,  -45,  -45,  -45,  -45,   95,   95,   95,   95,
       95,   95,   95,   95,   95,  -45,  -45,  -45,  -45,  -45,
      -45,   95,   95,   95,   95,   95,  121,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,

       95,   95,   95,   95,  -45,  -45,  -45,  -45,  -45,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,  -46,
      -46,  -46,  -46,  -46,  -46,  -46,   95,   95,   95,   95,
       95,   95,   95,   95,   95,  -46,  -46,  -46,  -46,  -46,
      -46,   95,   95,   95,  122,   95,   95,   95,   95,   95,
      123,   95,   95,   95,   95,   95,   95,   95,   95,  124,
       95,   95,   95,   95,  -46,  -46,  -46,  -46,  -46,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,  -47,

      -47,  -47,  -47,  -47,  -47,  -47,   95,   95,   95,   95,
       95,   95,   95,   95,   95,  -47,  -47,  -47,  -47,  -47,
      -47,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,  125,   95,   95,  126,   95,   95,
       95,   95,   95,   95,  -47,  -47,  -47,  -47,  -47,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,  -48,
      -48,  -48,  -48,  -48,  -48,  -48,   95,   95,   95,   95,
       95,   95,   95,   95,   95,  -48,  -48,  -48,  -48,  -48,
      -48,   95,   95,   95,   95,   95,   95,   95,   95,   95,

      127,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,  -48,  -48,  -48,  -48,  -48,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,
      -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,
      -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,
      -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,
      -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,
      -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,  -49,
      -49,  -49,  -49,  -49,  -49,  -49,  -49

    },

    {
        9,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,  -50,
      -50,  -50,  -50,  -50,  -50,  -50,  -50
    },

    {
        9,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,
      -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,
      -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,

      -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,
      -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,  -51,
      -51,  -51,  -51,  -51,  -51,  -51,  128,  128,  128,  -51,
      -51,  -51,  -51,  -51,  -51,  -51,  -51
    },

    {
        9,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,
      -52,  -52,  -52,  -52,  -52,  -52,  -52,  -52,  129,  -52,

      -52,  -52,  -52,  -52,  -52,  -52,  -52
    },

    {
        9,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,  -53,
      -53,  -53,  -53,  -53,  -53,  -53,  130,  130,  130,  -53,
      -53,  -53,  -53,  -53,  -53,  -53,  -53
    },

    {
        9,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,

      -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,  -54,
      -54,  -54,  -54,  -54,  -54,  -54,  131,  131,  -54,  -54,
      -54,  -54,  -54,  -54,  -54,  -54,  -54
    },

    {
        9,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,  -55,

      -55,  -55,  -55,  -55,  -55,  -55,  132,  132,  132,  -55,
      -55,  -55,  -55,  -55,  -55,  -55,  -55
    },

    {
        9,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,
      -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,
      -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,
      -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,
      -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,  -56,
      -56,  -56,  -56,  -56,  -56,  -56,  -56,  133,  133,  -56,
      -56,  -56,  -56,  -56,  -56,  -56,  -56
    },

    {
        9,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,

      -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,  -57,
      -57,  -57,  -57,  -57,  -57,  -57,  134,  134,  134,  -57,
      -57,  -57,  -57,  -57,  -57,  -57,  -57
    },

    {
        9,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,

      -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58,  -58,  135,  -58,  -58,  -58,
      -58,  -58,  -58,  -58,  -58,  -58,  -58
    },

    {
        9,  136,  136,  -59,  -59,  136,  136,  136,  136,  136,
      136,  -59,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136

    },

    {
        9,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,
      -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,
      -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,
      -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,
      -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,
      -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,  -60,
      -60,  -60,  -60,  -60,  -60,  -60,  -60
    },

    {
        9,  -61,  -61,  137,  -61,  -61,  -61,  -61,  -61,  -61,
      -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,
      -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,

      -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,
      -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,
      -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,  -61,
      -61,  -61,  -61,  -61,  -61,  -61,  -61
    },

    {
        9,  138,  138,  -62,  -62,  138,  138,  138,  138,  138,
      138,  139,  138,  138,  138,  140,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,

      138,  138,  138,  138,  138,  138,  138
    },

    {
        9,  141,  141,  -63,  -63,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141
    },

    {
        9,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,
      -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,

      -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,
      -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,
      -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,
      -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,  -64,
      -64,  -64,  -64,  -64,  -64,  -64,  -64
    },

    {
        9,  -65,  -65,  142,  -65,  -65,  -65,  -65,  -65,  -65,
      -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,
      -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,
      -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,
      -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,

      -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,  -65,
      -65,  -65,  -65,  -65,  -65,  -65,  -65
    },

    {
        9,  -66,  143,  -66,  -66,  -66,  -66,  -66,  -66,  -66,
      -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,
      -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,
      -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,
      -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,
      -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,  -66,
      -66,  -66,  -66,  -66,  -66,  -66,  -66
    },

    {
        9,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,  -67,

      -67,  -67,  -67,  -67,  -67,  -67,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  -67,  -67,  -67,  -67,  -67,
      -67,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  -67,  -67,  -67,  -67,  -67,  145,
      146,  147,  148,  149,  150,  151,  152
    },

    {
        9,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,
      -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,
      -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,
      -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,

      -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,  -68,
      -68,  -68,  -68,  -68,  -68,  -68,  153,  153,  153,  -68,
      -68,  -68,  -68,  -68,  -68,  -68,  -68
    },

    {
        9,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,
      -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,
      -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,
      -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,
      -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,
      -69,  -69,  -69,  -69,  -69,  -69,  -69,  -69,  154,  -69,
      -69,  -69,  -69,  -69,  -69,  -69,  -69

    },

    {
        9,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,
      -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,
      -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,
      -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,
      -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,  -70,
      -70,  -70,  -70,  -70,  -70,  -70,  155,  155,  155,  -70,
      -70,  -70,  -70,  -70,  -70,  -70,  -70
    },

    {
        9,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,
      -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,
      -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,

      -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,
      -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,  -71,
      -71,  -71,  -71,  -71,  -71,  -71,  156,  156,  -71,  -71,
      -71,  -71,  -71,  -71,  -71,  -71,  -71
    },

    {
        9,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,
      -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,
      -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,
      -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,
      -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,  -72,
      -72,  -72,  -72,  -72,  -72,  -72,  157,  157,  157,  -72,

      -72,  -72,  -72,  -72,  -72,  -72,  -72
    },

    {
        9,  -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,
      -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,
      -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,
      -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,
      -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,  -73,
      -73,  -73,  -73,  -73,  -73,  -73,  -73,  158,  158,  -73,
      -73,  -73,  -73,  -73,  -73,  -73,  -73
    },

    {
        9,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,
      -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,

      -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,
      -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,
      -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,  -74,
      -74,  -74,  -74,  -74,  -74,  -74,  159,  159,  159,  -74,
      -74,  -74,  -74,  -74,  -74,  -74,  -74
    },

    {
        9,  -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,
      -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,
      -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,
      -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,
      -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,  -75,

      -75,  -75,  -75,  -75,  -75,  -75,  160,  -75,  -75,  -75,
      -75,  -75,  -75,  -75,  -75,  -75,  -75
    },

    {
        9,  -76,   76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,
      -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,
      -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,
      -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,
      -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,
      -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,  -76,
      -76,  -76,  -76,  -76,  -76,  -76,  -76
    },

    {
        9,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,

      -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,
      -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,
      -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,
      -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,
      -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,  -77,
      -77,  -77,  -77,  -77,  -77,  -77,  -77
    },

    {
        9,   78,   78,  -78,  -78,   79,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   80,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,

       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78
    },

    {
        9,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,
      -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,
      -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,
      -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,
      -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,
      -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,  -79,
      -79,  -79,  -79,  -79,  -79,  -79,  -79

    },

    {
        9,  -80,  -80,  -80,  -80,   78,  -80,  -80,   78,  -80,
      -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
      -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,  -80,   78,
      -80,  -80,  -80,   78,  -80,  -80,  -80,   78,  -80,  -80,
      -80,  -80,  -80,   78,  -80,  -80,  -80,   78,  -80,   78,
      -80,  -80,  161,  -80,  -80,  -80,  -80,  -80,  -80,  -80,
      -80,  -80,  -80,  -80,  -80,  -80,  -80
    },

    {
        9,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,
      -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,
      -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,

      -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,
      -81,  -81,  -81,  -81,  -81,  -81,  -81,  162,  -81,  -81,
      -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,  -81,
      -81,  -81,  -81,  -81,  -81,  -81,  -81
    },

    {
        9,  -82,  -82,  -82,  -82,  -82,  -82,  -82,  163,  -82,
      -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,
      -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,
      -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,
      -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,
      -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,  -82,

      -82,  -82,  -82,  -82,  -82,  -82,  -82
    },

    {
        9,  -83,  -83,  -83,  -83,   82,  -83,  -83,   82,  -83,
      -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,
      -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,  -83,   82,
      -83,  -83,  -83,   82,  -83,  -83,  -83,   82,  -83,  -83,
      -83,  -83,  -83,   82,  -83,  -83,  -83,   82,  -83,   82,
      -83,  -83,  164,  -83,  -83,  -83,  -83,  -83,  -83,  -83,
      -83,  -83,  -83,  -83,  -83,  -83,  -83
    },

    {
        9,  -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,
      -84,  -84,  -84,  -84,  -84,  -84,   88,   88,   88,   88,

       88,   88,   88,   88,   88,  -84,  -84,  -84,  -84,  -84,
      -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,
      -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,
      -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,  -84,
      -84,  -84,  -84,  -84,  -84,  -84,  -84
    },

    {
        9,  -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,
      -85,  -85,  -85,  -85,   84,  -85,   91,   91,   92,   92,
       92,   92,   92,   87,   87,  -85,  -85,  -85,  -85,  -85,
      -85,  -85,  -85,   93,  -85,  -85,  -85,  -85,  -85,  -85,
      -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,  -85,

      -85,  -85,   94,  -85,  -85,  -85,  -85,  -85,  -85,  -85,
      -85,  -85,  -85,  -85,  -85,  -85,  -85
    },

    {
        9,  -86,  -86,  -86,  -86,  -86,  -86,  -86,  -86,  -86,
      -86,  -86,  -86,  -86,   84,  -86,   86,   86,   87,   87,
       87,   87,   87,   87,   87,  -86,  -86,  -86,  -86,  -86,
      -86,  -86,  -86,   93,  -86,  -86,  -86,  -86,  -86,  -86,
      -86,  -86,  -86,  -86,  -86,  -86,  -86,  -86,  -86,  -86,
      -86,  -86,  -86,  -86,  -86,  -86,  -86,  -86,  -86,  -86,
      -86,  -86,  -86,  -86,  -86,  -86,  -86
    },

    {
        9,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,

      -87,  -87,  -87,  -87,   84,  -87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,  -87,  -87,  -87,  -87,  -87,
      -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,
      -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,
      -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,  -87,
      -87,  -87,  -87,  -87,  -87,  -87,  -87
    },

    {
        9,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,
      -88,  -88,  -88,  -88,  -88,  -88,   88,   88,   88,   88,
       88,   88,   88,   88,   88,  -88,  -88,  -88,  -88,  -88,
      -88,  -88,  -88,  -88,  -88,  -88,  165,  -88,  -88,  -88,

      -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,
      -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,  -88,
      -88,  -88,  -88,  -88,  -88,  -88,  -88
    },

    {
        9,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,
      -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,
      -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,
      -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,
      -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,
      -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,  -89,
      -89,  -89,  -89,  -89,  -89,  -89,  -89

    },

    {
        9,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,
      -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,
      -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,
      -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,
      -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,
      -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,  -90,
      -90,  -90,  -90,  -90,  -90,  -90,  -90
    },

    {
        9,  -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,
      -91,  -91,  -91,  -91,   84,  -91,   91,   91,   92,   92,
       92,   92,   92,   87,   87,  -91,  -91,  -91,  -91,  -91,

      -91,  -91,  -91,   93,  -91,  -91,  -91,  -91,  -91,  -91,
      -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,
      -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,  -91,
      -91,  -91,  -91,  -91,  -91,  -91,  -91
    },

    {
        9,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,
      -92,  -92,  -92,  -92,   84,  -92,   92,   92,   92,   92,
       92,   92,   92,   87,   87,  -92,  -92,  -92,  -92,  -92,
      -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,
      -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,
      -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,  -92,

      -92,  -92,  -92,  -92,  -92,  -92,  -92
    },

    {
        9,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,
      -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,
      -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,
      -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,
      -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,
      -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,  -93,
      -93,  -93,  -93,  -93,  -93,  -93,  -93
    },

    {
        9,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,
      -94,  -94,  -94,  -94,  -94,  -94,  166,  166,  166,  166,

      166,  166,  166,  166,  166,  -94,  -94,  -94,  -94,  -94,
      -94,  -94,  166,  166,  166,  166,  166,  166,  -94,  -94,
      -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,
      -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,  -94,
      -94,  -94,  -94,  -94,  -94,  -94,  -94
    },

    {
        9,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,  -95,
      -95,  -95,  -95,  -95,  -95,  -95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,  -95,  -95,  -95,  -95,  -95,
      -95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,

       95,   95,   95,   95,  -95,  -95,  -95,  -95,  -95,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,
      -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,
      -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,
      -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,
      -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,  -96,
      -96,  -96,  -96,  -96,  -96,  -96,   95,   95,   95,  -96,
      -96,  -96,  -96,  -96,  -96,  -96,  -96
    },

    {
        9,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,

      -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,
      -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,
      -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,
      -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,
      -97,  -97,  -97,  -97,  -97,  -97,  -97,  -97,  167,  -97,
      -97,  -97,  -97,  -97,  -97,  -97,  -97
    },

    {
        9,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,
      -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,
      -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,
      -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,

      -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,  -98,
      -98,  -98,  -98,  -98,  -98,  -98,  168,  168,  168,  -98,
      -98,  -98,  -98,  -98,  -98,  -98,  -98
    },

    {
        9,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,
      -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,
      -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,
      -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,
      -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,  -99,
      -99,  -99,  -99,  -99,  -99,  -99,  169,  169,  -99,  -99,
      -99,  -99,  -99,  -99,  -99,  -99,  -99

    },

    {
        9, -100, -100, -100, -100, -100, -100, -100, -100, -100,
     -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
     -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
     -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
     -100, -100, -100, -100, -100, -100, -100, -100, -100, -100,
     -100, -100, -100, -100, -100, -100,  170,  170,  170, -100,
     -100, -100, -100, -100, -100, -100, -100
    },

    {
        9, -101, -101, -101, -101, -101, -101, -101, -101, -101,
     -101, -101, -101, -101, -101, -101, -101, -101, -101, -101,
     -101, -101, -101, -101, -101, -101, -101, -101, -101, -101,

     -101, -101, -101, -101, -101, -101, -101, -101, -101, -101,
     -101, -101, -101, -101, -101, -101, -101, -101, -101, -101,
     -101, -101, -101, -101, -101, -101, -101,  171,  171, -101,
     -101, -101, -101, -101, -101, -101, -101
    },

    {
        9, -102, -102, -102, -102, -102, -102, -102, -102, -102,
     -102, -102, -102, -102, -102, -102, -102, -102, -102, -102,
     -102, -102, -102, -102, -102, -102, -102, -102, -102, -102,
     -102, -102, -102, -102, -102, -102, -102, -102, -102, -102,
     -102, -102, -102, -102, -102, -102, -102, -102, -102, -102,
     -102, -102, -102, -102, -102, -102,  172,  172,  172, -102,

     -102, -102, -102, -102, -102, -102, -102
    },

    {
        9, -103, -103, -103, -103, -103, -103, -103, -103, -103,
     -103, -103, -103, -103, -103, -103, -103, -103, -103, -103,
     -103, -103, -103, -103, -103, -103, -103, -103, -103, -103,
     -103, -103, -103, -103, -103, -103, -103, -103, -103, -103,
     -103, -103, -103, -103, -103, -103, -103, -103, -103, -103,
     -103, -103, -103, -103, -103, -103,  173, -103, -103, -103,
     -103, -103, -103, -103, -103, -103, -103
    },

    {
        9, -104, -104, -104, -104, -104, -104, -104, -104, -104,
     -104, -104, -104, -104, -104, -104,   95,   95,   95,   95,

       95,   95,   95,   95,   95, -104, -104, -104, -104, -104,
     -104,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,  174, -104, -104, -104, -104, -104,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -105, -105, -105, -105, -105, -105, -105, -105, -105,
     -105, -105, -105, -105, -105, -105,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -105, -105, -105, -105, -105,
     -105,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,  175,   95,

       95,   95,   95,   95, -105, -105, -105, -105, -105,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -106, -106, -106, -106, -106, -106, -106, -106, -106,
     -106, -106, -106, -106, -106, -106,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -106, -106, -106, -106, -106,
     -106,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,  176,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -106, -106, -106, -106, -106,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -107, -107, -107, -107, -107, -107, -107, -107, -107,

     -107, -107, -107, -107, -107, -107,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -107, -107, -107, -107, -107,
     -107,   95,  177,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -107, -107, -107, -107, -107,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -108, -108, -108, -108, -108, -108, -108, -108, -108,
     -108, -108, -108, -108, -108, -108,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -108, -108, -108, -108, -108,
     -108,   95,  178,   95,   95,   95,   95,   95,   95,   95,

       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -108, -108, -108, -108, -108,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -109, -109, -109, -109, -109, -109, -109, -109, -109,
     -109, -109, -109, -109, -109, -109,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -109, -109, -109, -109, -109,
     -109,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,  179,
       95,   95,   95,   95, -109, -109, -109, -109, -109,   96,
       97,   98,   99,  100,  101,  102,  103

    },

    {
        9, -110, -110, -110, -110, -110, -110, -110, -110, -110,
     -110, -110, -110, -110, -110, -110,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -110, -110, -110, -110, -110,
     -110,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,  180,   95,
       95,   95,   95,   95, -110, -110, -110, -110, -110,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -111, -111, -111, -111, -111, -111, -111, -111, -111,
     -111, -111, -111, -111, -111, -111,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -111, -111, -111, -111, -111,

     -111,   95,  181,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -111, -111, -111, -111, -111,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -112, -112, -112, -112, -112, -112, -112, -112, -112,
     -112, -112, -112, -112, -112, -112,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -112, -112, -112, -112, -112,
     -112,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,  182,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -112, -112, -112, -112, -112,   96,

       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -113, -113, -113, -113, -113, -113, -113, -113, -113,
     -113, -113, -113, -113, -113, -113,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -113, -113, -113, -113, -113,
     -113,   95,  183,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -113, -113, -113, -113, -113,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -114, -114, -114, -114, -114, -114, -114, -114, -114,
     -114, -114, -114, -114, -114, -114,   95,   95,   95,   95,

       95,   95,   95,   95,   95, -114, -114, -114, -114, -114,
     -114,   95,   95,   95,   95,  184,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,  185,   95,
       95,   95,   95,   95, -114, -114, -114, -114, -114,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -115, -115, -115, -115, -115, -115, -115, -115, -115,
     -115, -115, -115, -115, -115, -115,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -115, -115, -115, -115, -115,
     -115,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,  186,

       95,   95,   95,   95, -115, -115, -115, -115, -115,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -116, -116, -116, -116, -116, -116, -116, -116, -116,
     -116, -116, -116, -116, -116, -116,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -116, -116, -116, -116, -116,
     -116,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,  187,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -116, -116, -116, -116, -116,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -117, -117, -117, -117, -117, -117, -117, -117, -117,

     -117, -117, -117, -117, -117, -117,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -117, -117, -117, -117, -117,
     -117,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -117, -117, -117, -117, -117,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -118, -118, -118, -118, -118, -118, -118, -118, -118,
     -118, -118, -118, -118, -118, -118,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -118, -118, -118, -118, -118,
     -118,   95,   95,   95,   95,   95,   95,   95,   95,   95,

       95,   95,   95,   95,   95,   95,   95,  188,   95,   95,
       95,   95,   95,   95, -118, -118, -118, -118, -118,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -119, -119, -119, -119, -119, -119, -119, -119, -119,
     -119, -119, -119, -119, -119, -119,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -119, -119, -119, -119, -119,
     -119,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,  189,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -119, -119, -119, -119, -119,   96,
       97,   98,   99,  100,  101,  102,  103

    },

    {
        9, -120, -120, -120, -120, -120, -120, -120, -120, -120,
     -120, -120, -120, -120, -120, -120,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -120, -120, -120, -120, -120,
     -120,   95,  190,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -120, -120, -120, -120, -120,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -121, -121, -121, -121, -121, -121, -121, -121, -121,
     -121, -121, -121, -121, -121, -121,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -121, -121, -121, -121, -121,

     -121,   95,  191,   95,   95,   95,   95,  192,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,  193,   95,
       95,   95,   95,   95, -121, -121, -121, -121, -121,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -122, -122, -122, -122, -122, -122, -122, -122, -122,
     -122, -122, -122, -122, -122, -122,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -122, -122, -122, -122, -122,
     -122,   95,   95,   95,   95,   95,   95,   95,   95,  194,
       95,   95,   95,   95,  195,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -122, -122, -122, -122, -122,   96,

       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -123, -123, -123, -123, -123, -123, -123, -123, -123,
     -123, -123, -123, -123, -123, -123,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -123, -123, -123, -123, -123,
     -123,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,  196,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -123, -123, -123, -123, -123,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -124, -124, -124, -124, -124, -124, -124, -124, -124,
     -124, -124, -124, -124, -124, -124,   95,   95,   95,   95,

       95,   95,   95,   95,   95, -124, -124, -124, -124, -124,
     -124,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,  197,   95,   95,
       95,   95,   95,   95, -124, -124, -124, -124, -124,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -125, -125, -125, -125, -125, -125, -125, -125, -125,
     -125, -125, -125, -125, -125, -125,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -125, -125, -125, -125, -125,
     -125,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,  198,   95,

       95,   95,   95,   95, -125, -125, -125, -125, -125,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -126, -126, -126, -126, -126, -126, -126, -126, -126,
     -126, -126, -126, -126, -126, -126,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -126, -126, -126, -126, -126,
     -126,   95,  199,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
      200,   95,   95,   95, -126, -126, -126, -126, -126,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -127, -127, -127, -127, -127, -127, -127, -127, -127,

     -127, -127, -127, -127, -127, -127,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -127, -127, -127, -127, -127,
     -127,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,  201,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -127, -127, -127, -127, -127,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -128, -128, -128, -128, -128, -128, -128, -128, -128,
     -128, -128, -128, -128, -128, -128,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -128, -128, -128, -128, -128,
     -128,   95,   95,   95,   95,   95,   95,   95,   95,   95,

       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -128, -128, -128, -128, -128,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -129, -129, -129, -129, -129, -129, -129, -129, -129,
     -129, -129, -129, -129, -129, -129, -129, -129, -129, -129,
     -129, -129, -129, -129, -129, -129, -129, -129, -129, -129,
     -129, -129, -129, -129, -129, -129, -129, -129, -129, -129,
     -129, -129, -129, -129, -129, -129, -129, -129, -129, -129,
     -129, -129, -129, -129, -129, -129,  128,  128,  128, -129,
     -129, -129, -129, -129, -129, -129, -129

    },

    {
        9, -130, -130, -130, -130, -130, -130, -130, -130, -130,
     -130, -130, -130, -130, -130, -130, -130, -130, -130, -130,
     -130, -130, -130, -130, -130, -130, -130, -130, -130, -130,
     -130, -130, -130, -130, -130, -130, -130, -130, -130, -130,
     -130, -130, -130, -130, -130, -130, -130, -130, -130, -130,
     -130, -130, -130, -130, -130, -130,  128,  128,  128, -130,
     -130, -130, -130, -130, -130, -130, -130
    },

    {
        9, -131, -131, -131, -131, -131, -131, -131, -131, -131,
     -131, -131, -131, -131, -131, -131, -131, -131, -131, -131,
     -131, -131, -131, -131, -131, -131, -131, -131, -131, -131,

     -131, -131, -131, -131, -131, -131, -131, -131, -131, -131,
     -131, -131, -131, -131, -131, -131, -131, -131, -131, -131,
     -131, -131, -131, -131, -131, -131,  128,  128,  128, -131,
     -131, -131, -131, -131, -131, -131, -131
    },

    {
        9, -132, -132, -132, -132, -132, -132, -132, -132, -132,
     -132, -132, -132, -132, -132, -132, -132, -132, -132, -132,
     -132, -132, -132, -132, -132, -132, -132, -132, -132, -132,
     -132, -132, -132, -132, -132, -132, -132, -132, -132, -132,
     -132, -132, -132, -132, -132, -132, -132, -132, -132, -132,
     -132, -132, -132, -132, -132, -132,  128,  128,  128, -132,

     -132, -132, -132, -132, -132, -132, -132
    },

    {
        9, -133, -133, -133, -133, -133, -133, -133, -133, -133,
     -133, -133, -133, -133, -133, -133, -133, -133, -133, -133,
     -133, -133, -133, -133, -133, -133, -133, -133, -133, -133,
     -133, -133, -133, -133, -133, -133, -133, -133, -133, -133,
     -133, -133, -133, -133, -133, -133, -133, -133, -133, -133,
     -133, -133, -133, -133, -133, -133,  202,  202,  202, -133,
     -133, -133, -133, -133, -133, -133, -133
    },

    {
        9, -134, -134, -134, -134, -134, -134, -134, -134, -134,
     -134, -134, -134, -134, -134, -134, -134, -134, -134, -134,

     -134, -134, -134, -134, -134, -134, -134, -134, -134, -134,
     -134, -134, -134, -134, -134, -134, -134, -134, -134, -134,
     -134, -134, -134, -134, -134, -134, -134, -134, -134, -134,
     -134, -134, -134, -134, -134, -134,  203,  203,  203, -134,
     -134, -134, -134, -134, -134, -134, -134
    },

    {
        9, -135, -135, -135, -135, -135, -135, -135, -135, -135,
     -135, -135, -135, -135, -135, -135, -135, -135, -135, -135,
     -135, -135, -135, -135, -135, -135, -135, -135, -135, -135,
     -135, -135, -135, -135, -135, -135, -135, -135, -135, -135,
     -135, -135, -135, -135, -135, -135, -135, -135, -135, -135,

     -135, -135, -135, -135, -135, -135,  204,  204,  204, -135,
     -135, -135, -135, -135, -135, -135, -135
    },

    {
        9,  136,  136, -136, -136,  136,  136,  136,  136,  136,
      136, -136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  136
    },

    {
        9, -137, -137, -137, -137, -137, -137, -137, -137, -137,

     -137, -137, -137, -137, -137, -137, -137, -137, -137, -137,
     -137, -137, -137, -137, -137, -137, -137, -137, -137, -137,
     -137, -137, -137, -137, -137, -137, -137, -137, -137, -137,
     -137, -137, -137, -137, -137, -137, -137, -137, -137, -137,
     -137, -137, -137, -137, -137, -137, -137, -137, -137, -137,
     -137, -137, -137, -137, -137, -137, -137
    },

    {
        9,  138,  138, -138, -138,  138,  138,  138,  138,  138,
      138, -138,  138,  138,  138, -138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,

      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138
    },

    {
        9,  138,  138, -139, -139,  138,  138,  138,  138,  138,
      138,  139,  138,  138,  138,  140,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  138,  138,  138,  138,  138,  138

    },

    {
        9, -140, -140, -140, -140, -140, -140, -140, -140, -140,
     -140, -140, -140, -140, -140, -140, -140, -140, -140, -140,
     -140, -140, -140, -140, -140, -140, -140, -140, -140, -140,
     -140, -140, -140, -140, -140, -140, -140, -140, -140, -140,
     -140, -140, -140, -140, -140, -140, -140, -140, -140, -140,
     -140, -140, -140, -140, -140, -140, -140, -140, -140, -140,
     -140, -140, -140, -140, -140, -140, -140
    },

    {
        9,  141,  141, -141, -141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,

      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141,  141,  141,  141,
      141,  141,  141,  141,  141,  141,  141
    },

    {
        9, -142, -142, -142, -142, -142, -142, -142, -142, -142,
     -142, -142, -142, -142, -142, -142, -142, -142, -142, -142,
     -142, -142, -142, -142, -142, -142, -142, -142, -142, -142,
     -142, -142, -142, -142, -142, -142, -142, -142, -142, -142,
     -142, -142, -142, -142, -142, -142, -142, -142, -142, -142,
     -142, -142, -142, -142, -142, -142, -142, -142, -142, -142,

     -142, -142, -142, -142, -142, -142, -142
    },

    {
        9, -143,  143, -143, -143, -143, -143, -143, -143, -143,
     -143, -143, -143, -143, -143, -143, -143, -143, -143, -143,
     -143, -143, -143, -143, -143, -143, -143, -143, -143, -143,
     -143, -143, -143, -143, -143, -143, -143, -143, -143, -143,
     -143, -143, -143, -143, -143, -143, -143, -143, -143, -143,
     -143, -143, -143, -143, -143, -143, -143, -143, -143, -143,
     -143, -143, -143, -143, -143, -143, -143
    },

    {
        9, -144, -144, -144, -144, -144, -144, -144, -144, -144,
     -144, -144, -144, -144, -144, -144,  144,  144,  144,  144,

      144,  144,  144,  144,  144, -144, -144, -144, -144, -144,
     -144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144, -144, -144, -144, -144, -144,  145,
      146,  147,  148,  149,  150,  151,  152
    },

    {
        9, -145, -145, -145, -145, -145, -145, -145, -145, -145,
     -145, -145, -145, -145, -145, -145, -145, -145, -145, -145,
     -145, -145, -145, -145, -145, -145, -145, -145, -145, -145,
     -145, -145, -145, -145, -145, -145, -145, -145, -145, -145,
     -145, -145, -145, -145, -145, -145, -145, -145, -145, -145,

     -145, -145, -145, -145, -145, -145,  144,  144,  144, -145,
     -145, -145, -145, -145, -145, -145, -145
    },

    {
        9, -146, -146, -146, -146, -146, -146, -146, -146, -146,
     -146, -146, -146, -146, -146, -146, -146, -146, -146, -146,
     -146, -146, -146, -146, -146, -146, -146, -146, -146, -146,
     -146, -146, -146, -146, -146, -146, -146, -146, -146, -146,
     -146, -146, -146, -146, -146, -146, -146, -146, -146, -146,
     -146, -146, -146, -146, -146, -146, -146, -146,  205, -146,
     -146, -146, -146, -146, -146, -146, -146
    },

    {
        9, -147, -147, -147, -147, -147, -147, -147, -147, -147,

     -147, -147, -147, -147, -147, -147, -147, -147, -147, -147,
     -147, -147, -147, -147, -147, -147, -147, -147, -147, -147,
     -147, -147, -147, -147, -147, -147, -147, -147, -147, -147,
     -147, -147, -147, -147, -147, -147, -147, -147, -147, -147,
     -147, -147, -147, -147, -147, -147,  206,  206,  206, -147,
     -147, -147, -147, -147, -147, -147, -147
    },

    {
        9, -148, -148, -148, -148, -148, -148, -148, -148, -148,
     -148, -148, -148, -148, -148, -148, -148, -148, -148, -148,
     -148, -148, -148, -148, -148, -148, -148, -148, -148, -148,
     -148, -148, -148, -148, -148, -148, -148, -148, -148, -148,

     -148, -148, -148, -148, -148, -148, -148, -148, -148, -148,
     -148, -148, -148, -148, -148, -148,  207,  207, -148, -148,
     -148, -148, -148, -148, -148, -148, -148
    },

    {
        9, -149, -149, -149, -149, -149, -149, -149, -149, -149,
     -149, -149, -149, -149, -149, -149, -149, -149, -149, -149,
     -149, -149, -149, -149, -149, -149, -149, -149, -149, -149,
     -149, -149, -149, -149, -149, -149, -149, -149, -149, -149,
     -149, -149, -149, -149, -149, -149, -149, -149, -149, -149,
     -149, -149, -149, -149, -149, -149,  208,  208,  208, -149,
     -149, -149, -149, -149, -149, -149, -149

    },

    {
        9, -150, -150, -150, -150, -150, -150, -150, -150, -150,
     -150, -150, -150, -150, -150, -150, -150, -150, -150, -150,
     -150, -150, -150, -150, -150, -150, -150, -150, -150, -150,
     -150, -150, -150, -150, -150, -150, -150, -150, -150, -150,
     -150, -150, -150, -150, -150, -150, -150, -150, -150, -150,
     -150, -150, -150, -150, -150, -150, -150,  209,  209, -150,
     -150, -150, -150, -150, -150, -150, -150
    },

    {
        9, -151, -151, -151, -151, -151, -151, -151, -151, -151,
     -151, -151, -151, -151, -151, -151, -151, -151, -151, -151,
     -151, -151, -151, -151, -151, -151, -151, -151, -151, -151,

     -151, -151, -151, -151, -151, -151, -151, -151, -151, -151,
     -151, -151, -151, -151, -151, -151, -151, -151, -151, -151,
     -151, -151, -151, -151, -151, -151,  210,  210,  210, -151,
     -151, -151, -151, -151, -151, -151, -151
    },

    {
        9, -152, -152, -152, -152, -152, -152, -152, -152, -152,
     -152, -152, -152, -152, -152, -152, -152, -152, -152, -152,
     -152, -152, -152, -152, -152, -152, -152, -152, -152, -152,
     -152, -152, -152, -152, -152, -152, -152, -152, -152, -152,
     -152, -152, -152, -152, -152, -152, -152, -152, -152, -152,
     -152, -152, -152, -152, -152, -152,  211, -152, -152, -152,

     -152, -152, -152, -152, -152, -152, -152
    },

    {
        9, -153, -153, -153, -153, -153, -153, -153, -153, -153,
     -153, -153, -153, -153, -153, -153,  144,  144,  144,  144,
      144,  144,  144,  144,  144, -153, -153, -153, -153, -153,
     -153,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144,  144,  144,  144,  144,  144,  144,
      144,  144,  144,  144, -153, -153, -153, -153, -153,  145,
      146,  147,  148,  149,  150,  151,  152
    },

    {
        9, -154, -154, -154, -154, -154, -154, -154, -154, -154,
     -154, -154, -154, -154, -154, -154, -154, -154, -154, -154,

     -154, -154, -154, -154, -154, -154, -154, -154, -154, -154,
     -154, -154, -154, -154, -154, -154, -154, -154, -154, -154,
     -154, -154, -154, -154, -154, -154, -154, -154, -154, -154,
     -154, -154, -154, -154, -154, -154,  153,  153,  153, -154,
     -154, -154, -154, -154, -154, -154, -154
    },

    {
        9, -155, -155, -155, -155, -155, -155, -155, -155, -155,
     -155, -155, -155, -155, -155, -155, -155, -155, -155, -155,
     -155, -155, -155, -155, -155, -155, -155, -155, -155, -155,
     -155, -155, -155, -155, -155, -155, -155, -155, -155, -155,
     -155, -155, -155, -155, -155, -155, -155, -155, -155, -155,

     -155, -155, -155, -155, -155, -155,  153,  153,  153, -155,
     -155, -155, -155, -155, -155, -155, -155
    },

    {
        9, -156, -156, -156, -156, -156, -156, -156, -156, -156,
     -156, -156, -156, -156, -156, -156, -156, -156, -156, -156,
     -156, -156, -156, -156, -156, -156, -156, -156, -156, -156,
     -156, -156, -156, -156, -156, -156, -156, -156, -156, -156,
     -156, -156, -156, -156, -156, -156, -156, -156, -156, -156,
     -156, -156, -156, -156, -156, -156,  153,  153,  153, -156,
     -156, -156, -156, -156, -156, -156, -156
    },

    {
        9, -157, -157, -157, -157, -157, -157, -157, -157, -157,

     -157, -157, -157, -157, -157, -157, -157, -157, -157, -157,
     -157, -157, -157, -157, -157, -157, -157, -157, -157, -157,
     -157, -157, -157, -157, -157, -157, -157, -157, -157, -157,
     -157, -157, -157, -157, -157, -157, -157, -157, -157, -157,
     -157, -157, -157, -157, -157, -157,  153,  153,  153, -157,
     -157, -157, -157, -157, -157, -157, -157
    },

    {
        9, -158, -158, -158, -158, -158, -158, -158, -158, -158,
     -158, -158, -158, -158, -158, -158, -158, -158, -158, -158,
     -158, -158, -158, -158, -158, -158, -158, -158, -158, -158,
     -158, -158, -158, -158, -158, -158, -158, -158, -158, -158,

     -158, -158, -158, -158, -158, -158, -158, -158, -158, -158,
     -158, -158, -158, -158, -158, -158,  212,  212,  212, -158,
     -158, -158, -158, -158, -158, -158, -158
    },

    {
        9, -159, -159, -159, -159, -159, -159, -159, -159, -159,
     -159, -159, -159, -159, -159, -159, -159, -159, -159, -159,
     -159, -159, -159, -159, -159, -159, -159, -159, -159, -159,
     -159, -159, -159, -159, -159, -159, -159, -159, -159, -159,
     -159, -159, -159, -159, -159, -159, -159, -159, -159, -159,
     -159, -159, -159, -159, -159, -159,  213,  213,  213, -159,
     -159, -159, -159, -159, -159, -159, -159

    },

    {
        9, -160, -160, -160, -160, -160, -160, -160, -160, -160,
     -160, -160, -160, -160, -160, -160, -160, -160, -160, -160,
     -160, -160, -160, -160, -160, -160, -160, -160, -160, -160,
     -160, -160, -160, -160, -160, -160, -160, -160, -160, -160,
     -160, -160, -160, -160, -160, -160, -160, -160, -160, -160,
     -160, -160, -160, -160, -160, -160,  214,  214,  214, -160,
     -160, -160, -160, -160, -160, -160, -160
    },

    {
        9, -161, -161, -161, -161, -161, -161, -161, -161, -161,
     -161, -161, -161, -161, -161, -161,  215,  215,  215,  215,
      215,  215,  215,  215,  215, -161, -161, -161, -161, -161,

     -161, -161,  215,  215,  215,  215,  215,  215, -161, -161,
     -161, -161, -161, -161, -161, -161, -161, -161, -161, -161,
     -161, -161, -161, -161, -161, -161, -161, -161, -161, -161,
     -161, -161, -161, -161, -161, -161, -161
    },

    {
        9, -162, -162, -162, -162, -162, -162, -162, -162, -162,
     -162, -162, -162, -162, -162, -162, -162, -162, -162, -162,
     -162, -162, -162, -162, -162, -162, -162, -162, -162, -162,
     -162, -162,  216, -162, -162, -162, -162, -162, -162, -162,
     -162, -162, -162, -162, -162, -162, -162, -162, -162, -162,
     -162, -162, -162, -162, -162, -162, -162, -162, -162, -162,

     -162, -162, -162, -162, -162, -162, -162
    },

    {
        9, -163, -163, -163, -163, -163, -163, -163, -163, -163,
     -163, -163, -163, -163, -163, -163, -163, -163, -163, -163,
     -163, -163, -163, -163, -163, -163, -163, -163, -163, -163,
     -163, -163, -163, -163, -163, -163, -163, -163, -163, -163,
     -163, -163, -163, -163, -163, -163, -163, -163, -163, -163,
     -163, -163, -163, -163, -163, -163, -163, -163, -163, -163,
     -163, -163, -163, -163, -163, -163, -163
    },

    {
        9, -164, -164, -164, -164, -164, -164, -164, -164, -164,
     -164, -164, -164, -164, -164, -164,  217,  217,  217,  217,

      217,  217,  217,  217,  217, -164, -164, -164, -164, -164,
     -164, -164,  217,  217,  217,  217,  217,  217, -164, -164,
     -164, -164, -164, -164, -164, -164, -164, -164, -164, -164,
     -164, -164, -164, -164, -164, -164, -164, -164, -164, -164,
     -164, -164, -164, -164, -164, -164, -164
    },

    {
        9, -165, -165, -165, -165, -165, -165, -165, -165, -165,
     -165, -165,  218, -165, -165, -165,  219,  219,  219,  219,
      219,  219,  219,  219,  219, -165, -165, -165, -165, -165,
     -165, -165, -165, -165, -165, -165, -165, -165, -165, -165,
     -165, -165, -165, -165, -165, -165, -165, -165, -165, -165,

     -165, -165, -165, -165, -165, -165, -165, -165, -165, -165,
     -165, -165, -165, -165, -165, -165, -165
    },

    {
        9, -166, -166, -166, -166, -166, -166, -166, -166, -166,
     -166, -166, -166, -166, -166, -166,  166,  166,  166,  166,
      166,  166,  166,  166,  166, -166, -166, -166, -166, -166,
     -166, -166,  166,  166,  166,  166,  166,  166, -166, -166,
     -166, -166, -166, -166, -166, -166, -166, -166, -166, -166,
     -166, -166, -166, -166, -166, -166, -166, -166, -166, -166,
     -166, -166, -166, -166, -166, -166, -166
    },

    {
        9, -167, -167, -167, -167, -167, -167, -167, -167, -167,

     -167, -167, -167, -167, -167, -167, -167, -167, -167, -167,
     -167, -167, -167, -167, -167, -167, -167, -167, -167, -167,
     -167, -167, -167, -167, -167, -167, -167, -167, -167, -167,
     -167, -167, -167, -167, -167, -167, -167, -167, -167, -167,
     -167, -167, -167, -167, -167, -167,   95,   95,   95, -167,
     -167, -167, -167, -167, -167, -167, -167
    },

    {
        9, -168, -168, -168, -168, -168, -168, -168, -168, -168,
     -168, -168, -168, -168, -168, -168, -168, -168, -168, -168,
     -168, -168, -168, -168, -168, -168, -168, -168, -168, -168,
     -168, -168, -168, -168, -168, -168, -168, -168, -168, -168,

     -168, -168, -168, -168, -168, -168, -168, -168, -168, -168,
     -168, -168, -168, -168, -168, -168,   95,   95,   95, -168,
     -168, -168, -168, -168, -168, -168, -168
    },

    {
        9, -169, -169, -169, -169, -169, -169, -169, -169, -169,
     -169, -169, -169, -169, -169, -169, -169, -169, -169, -169,
     -169, -169, -169, -169, -169, -169, -169, -169, -169, -169,
     -169, -169, -169, -169, -169, -169, -169, -169, -169, -169,
     -169, -169, -169, -169, -169, -169, -169, -169, -169, -169,
     -169, -169, -169, -169, -169, -169,   95,   95,   95, -169,
     -169, -169, -169, -169, -169, -169, -169

    },

    {
        9, -170, -170, -170, -170, -170, -170, -170, -170, -170,
     -170, -170, -170, -170, -170, -170, -170, -170, -170, -170,
     -170, -170, -170, -170, -170, -170, -170, -170, -170, -170,
     -170, -170, -170, -170, -170, -170, -170, -170, -170, -170,
     -170, -170, -170, -170, -170, -170, -170, -170, -170, -170,
     -170, -170, -170, -170, -170, -170,   95,   95,   95, -170,
     -170, -170, -170, -170, -170, -170, -170
    },

    {
        9, -171, -171, -171, -171, -171, -171, -171, -171, -171,
     -171, -171, -171, -171, -171, -171, -171, -171, -171, -171,
     -171, -171, -171, -171, -171, -171, -171, -171, -171, -171,

     -171, -171, -171, -171, -171, -171, -171, -171, -171, -171,
     -171, -171, -171, -171, -171, -171, -171, -171, -171, -171,
     -171, -171, -171, -171, -171, -171,  220,  220,  220, -171,
     -171, -171, -171, -171, -171, -171, -171
    },

    {
        9, -172, -172, -172, -172, -172, -172, -172, -172, -172,
     -172, -172, -172, -172, -172, -172, -172, -172, -172, -172,
     -172, -172, -172, -172, -172, -172, -172, -172, -172, -172,
     -172, -172, -172, -172, -172, -172, -172, -172, -172, -172,
     -172, -172, -172, -172, -172, -172, -172, -172, -172, -172,
     -172, -172, -172, -172, -172, -172,  221,  221,  221, -172,

     -172, -172, -172, -172, -172, -172, -172
    },

    {
        9, -173, -173, -173, -173, -173, -173, -173, -173, -173,
     -173, -173, -173, -173, -173, -173, -173, -173, -173, -173,
     -173, -173, -173, -173, -173, -173, -173, -173, -173, -173,
     -173, -173, -173, -173, -173, -173, -173, -173, -173, -173,
     -173, -173, -173, -173, -173, -173, -173, -173, -173, -173,
     -173, -173, -173, -173, -173, -173,  222,  222,  222, -173,
     -173, -173, -173, -173, -173, -173, -173
    },

    {
        9, -174, -174, -174, -174, -174, -174, -174, -174, -174,
     -174, -174, -174, -174, -174, -174,   95,   95,   95,   95,

       95,   95,   95,   95,   95, -174, -174, -174, -174, -174,
     -174,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -174, -174, -174, -174, -174,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -175, -175, -175, -175, -175, -175, -175, -175, -175,
     -175, -175, -175, -175, -175, -175,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -175, -175, -175, -175, -175,
     -175,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,  223,   95,   95,   95,   95,   95,

       95,   95,   95,   95, -175, -175, -175, -175, -175,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -176, -176, -176, -176, -176, -176, -176, -176, -176,
     -176, -176, -176, -176, -176, -176,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -176, -176, -176, -176, -176,
     -176,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,  224,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -176, -176, -176, -176, -176,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -177, -177, -177, -177, -177, -177, -177, -177, -177,

     -177, -177, -177, -177, -177, -177,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -177, -177, -177, -177, -177,
     -177,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,  225,   95,   95,
       95,   95,   95,   95, -177, -177, -177, -177, -177,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -178, -178, -178, -178, -178, -178, -178, -178, -178,
     -178, -178, -178, -178, -178, -178,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -178, -178, -178, -178, -178,
     -178,   95,   95,   95,   95,   95,   95,   95,   95,   95,

       95,   95,   95,   95,   95,   95,   95,   95,  226,   95,
       95,   95,   95,   95, -178, -178, -178, -178, -178,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -179, -179, -179, -179, -179, -179, -179, -179, -179,
     -179, -179, -179, -179, -179, -179,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -179, -179, -179, -179, -179,
     -179,   95,   95,   95,   95,   95,  227,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -179, -179, -179, -179, -179,   96,
       97,   98,   99,  100,  101,  102,  103

    },

    {
        9, -180, -180, -180, -180, -180, -180, -180, -180, -180,
     -180, -180, -180, -180, -180, -180,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -180, -180, -180, -180, -180,
     -180,   95,  228,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -180, -180, -180, -180, -180,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -181, -181, -181, -181, -181, -181, -181, -181, -181,
     -181, -181, -181, -181, -181, -181,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -181, -181, -181, -181, -181,

     -181,   95,   95,  229,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -181, -181, -181, -181, -181,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -182, -182, -182, -182, -182, -182, -182, -182, -182,
     -182, -182, -182, -182, -182, -182,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -182, -182, -182, -182, -182,
     -182,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,  230,   95,
       95,   95,   95,   95, -182, -182, -182, -182, -182,   96,

       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -183, -183, -183, -183, -183, -183, -183, -183, -183,
     -183, -183, -183, -183, -183, -183,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -183, -183, -183, -183, -183,
     -183,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,  231,   95,   95, -183, -183, -183, -183, -183,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -184, -184, -184, -184, -184, -184, -184, -184, -184,
     -184, -184, -184, -184, -184, -184,   95,   95,   95,   95,

       95,   95,   95,   95,   95, -184, -184, -184, -184, -184,
     -184,   95,   95,   95,   95,   95,   95,   95,   95,   95,
      232,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -184, -184, -184, -184, -184,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -185, -185, -185, -185, -185, -185, -185, -185, -185,
     -185, -185, -185, -185, -185, -185,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -185, -185, -185, -185, -185,
     -185,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,  233,

       95,   95,   95,   95, -185, -185, -185, -185, -185,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -186, -186, -186, -186, -186, -186, -186, -186, -186,
     -186, -186, -186, -186, -186, -186,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -186, -186, -186, -186, -186,
     -186,   95,   95,   95,   95,   95,   95,   95,   95,  234,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -186, -186, -186, -186, -186,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -187, -187, -187, -187, -187, -187, -187, -187, -187,

     -187, -187, -187, -187, -187, -187,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -187, -187, -187, -187, -187,
     -187,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,  235,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -187, -187, -187, -187, -187,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -188, -188, -188, -188, -188, -188, -188, -188, -188,
     -188, -188, -188, -188, -188, -188,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -188, -188, -188, -188, -188,
     -188,   95,  236,   95,   95,   95,   95,   95,   95,   95,

       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -188, -188, -188, -188, -188,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -189, -189, -189, -189, -189, -189, -189, -189, -189,
     -189, -189, -189, -189, -189, -189,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -189, -189, -189, -189, -189,
     -189,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,  237,   95,   95,   95,   95,
       95,   95,   95,   95, -189, -189, -189, -189, -189,   96,
       97,   98,   99,  100,  101,  102,  103

    },

    {
        9, -190, -190, -190, -190, -190, -190, -190, -190, -190,
     -190, -190, -190, -190, -190, -190,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -190, -190, -190, -190, -190,
     -190,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,  238,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -190, -190, -190, -190, -190,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -191, -191, -191, -191, -191, -191, -191, -191, -191,
     -191, -191, -191, -191, -191, -191,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -191, -191, -191, -191, -191,

     -191,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,  239,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -191, -191, -191, -191, -191,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -192, -192, -192, -192, -192, -192, -192, -192, -192,
     -192, -192, -192, -192, -192, -192,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -192, -192, -192, -192, -192,
     -192,   95,   95,   95,   95,   95,  240,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -192, -192, -192, -192, -192,   96,

       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -193, -193, -193, -193, -193, -193, -193, -193, -193,
     -193, -193, -193, -193, -193, -193,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -193, -193, -193, -193, -193,
     -193,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,  241,
       95,   95,   95,   95, -193, -193, -193, -193, -193,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -194, -194, -194, -194, -194, -194, -194, -194, -194,
     -194, -194, -194, -194, -194, -194,   95,   95,   95,   95,

       95,   95,   95,   95,   95, -194, -194, -194, -194, -194,
     -194,   95,   95,   95,   95,   95,  242,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -194, -194, -194, -194, -194,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -195, -195, -195, -195, -195, -195, -195, -195, -195,
     -195, -195, -195, -195, -195, -195,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -195, -195, -195, -195, -195,
     -195,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,  243,   95,   95,   95,   95,

       95,   95,   95,   95, -195, -195, -195, -195, -195,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -196, -196, -196, -196, -196, -196, -196, -196, -196,
     -196, -196, -196, -196, -196, -196,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -196, -196, -196, -196, -196,
     -196,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,  244,
       95,   95,   95,   95, -196, -196, -196, -196, -196,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -197, -197, -197, -197, -197, -197, -197, -197, -197,

     -197, -197, -197, -197, -197, -197,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -197, -197, -197, -197, -197,
     -197,   95,   95,   95,   95,   95,   95,   95,   95,   95,
      245,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -197, -197, -197, -197, -197,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -198, -198, -198, -198, -198, -198, -198, -198, -198,
     -198, -198, -198, -198, -198, -198,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -198, -198, -198, -198, -198,
     -198,   95,   95,   95,   95,   95,   95,   95,   95,   95,

       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
      246,   95,   95,   95, -198, -198, -198, -198, -198,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -199, -199, -199, -199, -199, -199, -199, -199, -199,
     -199, -199, -199, -199, -199, -199,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -199, -199, -199, -199, -199,
     -199,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,  247,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -199, -199, -199, -199, -199,   96,
       97,   98,   99,  100,  101,  102,  103

    },

    {
        9, -200, -200, -200, -200, -200, -200, -200, -200, -200,
     -200, -200, -200, -200, -200, -200,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -200, -200, -200, -200, -200,
     -200,   95,   95,   95,   95,   95,  248,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -200, -200, -200, -200, -200,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -201, -201, -201, -201, -201, -201, -201, -201, -201,
     -201, -201, -201, -201, -201, -201,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -201, -201, -201, -201, -201,

     -201,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,  249,
       95,   95,   95,   95, -201, -201, -201, -201, -201,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -202, -202, -202, -202, -202, -202, -202, -202, -202,
     -202, -202, -202, -202, -202, -202, -202, -202, -202, -202,
     -202, -202, -202, -202, -202, -202, -202, -202, -202, -202,
     -202, -202, -202, -202, -202, -202, -202, -202, -202, -202,
     -202, -202, -202, -202, -202, -202, -202, -202, -202, -202,
     -202, -202, -202, -202, -202, -202,  128,  128,  128, -202,

     -202, -202, -202, -202, -202, -202, -202
    },

    {
        9, -203, -203, -203, -203, -203, -203, -203, -203, -203,
     -203, -203, -203, -203, -203, -203, -203, -203, -203, -203,
     -203, -203, -203, -203, -203, -203, -203, -203, -203, -203,
     -203, -203, -203, -203, -203, -203, -203, -203, -203, -203,
     -203, -203, -203, -203, -203, -203, -203, -203, -203, -203,
     -203, -203, -203, -203, -203, -203,  128,  128,  128, -203,
     -203, -203, -203, -203, -203, -203, -203
    },

    {
        9, -204, -204, -204, -204, -204, -204, -204, -204, -204,
     -204, -204, -204, -204, -204, -204, -204, -204, -204, -204,

     -204, -204, -204, -204, -204, -204, -204, -204, -204, -204,
     -204, -204, -204, -204, -204, -204, -204, -204, -204, -204,
     -204, -204, -204, -204, -204, -204, -204, -204, -204, -204,
     -204, -204, -204, -204, -204, -204,  128,  128,  128, -204,
     -204, -204, -204, -204, -204, -204, -204
    },

    {
        9, -205, -205, -205, -205, -205, -205, -205, -205, -205,
     -205, -205, -205, -205, -205, -205, -205, -205, -205, -205,
     -205, -205, -205, -205, -205, -205, -205, -205, -205, -205,
     -205, -205, -205, -205, -205, -205, -205, -205, -205, -205,
     -205, -205, -205, -205, -205, -205, -205, -205, -205, -205,

     -205, -205, -205, -205, -205, -205,  144,  144,  144, -205,
     -205, -205, -205, -205, -205, -205, -205
    },

    {
        9, -206, -206, -206, -206, -206, -206, -206, -206, -206,
     -206, -206, -206, -206, -206, -206, -206, -206, -206, -206,
     -206, -206, -206, -206, -206, -206, -206, -206, -206, -206,
     -206, -206, -206, -206, -206, -206, -206, -206, -206, -206,
     -206, -206, -206, -206, -206, -206, -206, -206, -206, -206,
     -206, -206, -206, -206, -206, -206,  144,  144,  144, -206,
     -206, -206, -206, -206, -206, -206, -206
    },

    {
        9, -207, -207, -207, -207, -207, -207, -207, -207, -207,

     -207, -207, -207, -207, -207, -207, -207, -207, -207, -207,
     -207, -207, -207, -207, -207, -207, -207, -207, -207, -207,
     -207, -207, -207, -207, -207, -207, -207, -207, -207, -207,
     -207, -207, -207, -207, -207, -207, -207, -207, -207, -207,
     -207, -207, -207, -207, -207, -207,  144,  144,  144, -207,
     -207, -207, -207, -207, -207, -207, -207
    },

    {
        9, -208, -208, -208, -208, -208, -208, -208, -208, -208,
     -208, -208, -208, -208, -208, -208, -208, -208, -208, -208,
     -208, -208, -208, -208, -208, -208, -208, -208, -208, -208,
     -208, -208, -208, -208, -208, -208, -208, -208, -208, -208,

     -208, -208, -208, -208, -208, -208, -208, -208, -208, -208,
     -208, -208, -208, -208, -208, -208,  144,  144,  144, -208,
     -208, -208, -208, -208, -208, -208, -208
    },

    {
        9, -209, -209, -209, -209, -209, -209, -209, -209, -209,
     -209, -209, -209, -209, -209, -209, -209, -209, -209, -209,
     -209, -209, -209, -209, -209, -209, -209, -209, -209, -209,
     -209, -209, -209, -209, -209, -209, -209, -209, -209, -209,
     -209, -209, -209, -209, -209, -209, -209, -209, -209, -209,
     -209, -209, -209, -209, -209, -209,  250,  250,  250, -209,
     -209, -209, -209, -209, -209, -209, -209

    },

    {
        9, -210, -210, -210, -210, -210, -210, -210, -210, -210,
     -210, -210, -210, -210, -210, -210, -210, -210, -210, -210,
     -210, -210, -210, -210, -210, -210, -210, -210, -210, -210,
     -210, -210, -210, -210, -210, -210, -210, -210, -210, -210,
     -210, -210, -210, -210, -210, -210, -210, -210, -210, -210,
     -210, -210, -210, -210, -210, -210,  251,  251,  251, -210,
     -210, -210, -210, -210, -210, -210, -210
    },

    {
        9, -211, -211, -211, -211, -211, -211, -211, -211, -211,
     -211, -211, -211, -211, -211, -211, -211, -211, -211, -211,
     -211, -211, -211, -211, -211, -211, -211, -211, -211, -211,

     -211, -211, -211, -211, -211, -211, -211, -211, -211, -211,
     -211, -211, -211, -211, -211, -211, -211, -211, -211, -211,
     -211, -211, -211, -211, -211, -211,  252,  252,  252, -211,
     -211, -211, -211, -211, -211, -211, -211
    },

    {
        9, -212, -212, -212, -212, -212, -212, -212, -212, -212,
     -212, -212, -212, -212, -212, -212, -212, -212, -212, -212,
     -212, -212, -212, -212, -212, -212, -212, -212, -212, -212,
     -212, -212, -212, -212, -212, -212, -212, -212, -212, -212,
     -212, -212, -212, -212, -212, -212, -212, -212, -212, -212,
     -212, -212, -212, -212, -212, -212,  153,  153,  153, -212,

     -212, -212, -212, -212, -212, -212, -212
    },

    {
        9, -213, -213, -213, -213, -213, -213, -213, -213, -213,
     -213, -213, -213, -213, -213, -213, -213, -213, -213, -213,
     -213, -213, -213, -213, -213, -213, -213, -213, -213, -213,
     -213, -213, -213, -213, -213, -213, -213, -213, -213, -213,
     -213, -213, -213, -213, -213, -213, -213, -213, -213, -213,
     -213, -213, -213, -213, -213, -213,  153,  153,  153, -213,
     -213, -213, -213, -213, -213, -213, -213
    },

    {
        9, -214, -214, -214, -214, -214, -214, -214, -214, -214,
     -214, -214, -214, -214, -214, -214, -214, -214, -214, -214,

     -214, -214, -214, -214, -214, -214, -214, -214, -214, -214,
     -214, -214, -214, -214, -214, -214, -214, -214, -214, -214,
     -214, -214, -214, -214, -214, -214, -214, -214, -214, -214,
     -214, -214, -214, -214, -214, -214,  153,  153,  153, -214,
     -214, -214, -214, -214, -214, -214, -214
    },

    {
        9,   78,   78, -215, -215,   79,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,  253,  253,  253,  253,
      253,  253,  253,  253,  253,   78,   78,   78,   78,   80,
       78,   78,  253,  253,  253,  253,  253,  253,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,

       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78
    },

    {
        9, -216, -216, -216, -216, -216, -216, -216, -216, -216,
     -216, -216, -216, -216, -216, -216, -216, -216, -216, -216,
     -216, -216, -216, -216, -216, -216, -216, -216, -216, -216,
     -216, -216, -216, -216, -216, -216, -216, -216,  254, -216,
     -216, -216, -216, -216, -216, -216, -216, -216, -216, -216,
     -216, -216, -216, -216, -216, -216, -216, -216, -216, -216,
     -216, -216, -216, -216, -216, -216, -216
    },

    {
        9, -217, -217, -217, -217, -217, -217, -217,  163, -217,

     -217, -217, -217, -217, -217, -217,  255,  255,  255,  255,
      255,  255,  255,  255,  255, -217, -217, -217, -217, -217,
     -217, -217,  255,  255,  255,  255,  255,  255, -217, -217,
     -217, -217, -217, -217, -217, -217, -217, -217, -217, -217,
     -217, -217, -217, -217, -217, -217, -217, -217, -217, -217,
     -217, -217, -217, -217, -217, -217, -217
    },

    {
        9, -218, -218, -218, -218, -218, -218, -218, -218, -218,
     -218, -218, -218, -218, -218, -218,  219,  219,  219,  219,
      219,  219,  219,  219,  219, -218, -218, -218, -218, -218,
     -218, -218, -218, -218, -218, -218, -218, -218, -218, -218,

     -218, -218, -218, -218, -218, -218, -218, -218, -218, -218,
     -218, -218, -218, -218, -218, -218, -218, -218, -218, -218,
     -218, -218, -218, -218, -218, -218, -218
    },

    {
        9, -219, -219, -219, -219, -219, -219, -219, -219, -219,
     -219, -219, -219, -219, -219, -219,  219,  219,  219,  219,
      219,  219,  219,  219,  219, -219, -219, -219, -219, -219,
     -219, -219, -219, -219, -219, -219, -219, -219, -219, -219,
     -219, -219, -219, -219, -219, -219, -219, -219, -219, -219,
     -219, -219, -219, -219, -219, -219, -219, -219, -219, -219,
     -219, -219, -219, -219, -219, -219, -219

    },

    {
        9, -220, -220, -220, -220, -220, -220, -220, -220, -220,
     -220, -220, -220, -220, -220, -220, -220, -220, -220, -220,
     -220, -220, -220, -220, -220, -220, -220, -220, -220, -220,
     -220, -220, -220, -220, -220, -220, -220, -220, -220, -220,
     -220, -220, -220, -220, -220, -220, -220, -220, -220, -220,
     -220, -220, -220, -220, -220, -220,   95,   95,   95, -220,
     -220, -220, -220, -220, -220, -220, -220
    },

    {
        9, -221, -221, -221, -221, -221, -221, -221, -221, -221,
     -221, -221, -221, -221, -221, -221, -221, -221, -221, -221,
     -221, -221, -221, -221, -221, -221, -221, -221, -221, -221,

     -221, -221, -221, -221, -221, -221, -221, -221, -221, -221,
     -221, -221, -221, -221, -221, -221, -221, -221, -221, -221,
     -221, -221, -221, -221, -221, -221,   95,   95,   95, -221,
     -221, -221, -221, -221, -221, -221, -221
    },

    {
        9, -222, -222, -222, -222, -222, -222, -222, -222, -222,
     -222, -222, -222, -222, -222, -222, -222, -222, -222, -222,
     -222, -222, -222, -222, -222, -222, -222, -222, -222, -222,
     -222, -222, -222, -222, -222, -222, -222, -222, -222, -222,
     -222, -222, -222, -222, -222, -222, -222, -222, -222, -222,
     -222, -222, -222, -222, -222, -222,   95,   95,   95, -222,

     -222, -222, -222, -222, -222, -222, -222
    },

    {
        9, -223, -223, -223, -223, -223, -223, -223, -223, -223,
     -223, -223, -223, -223, -223, -223,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -223, -223, -223, -223, -223,
     -223,   95,   95,   95,  256,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -223, -223, -223, -223, -223,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -224, -224, -224, -224, -224, -224, -224, -224, -224,
     -224, -224, -224, -224, -224, -224,   95,   95,   95,   95,

       95,   95,   95,   95,   95, -224, -224, -224, -224, -224,
     -224,   95,   95,   95,   95,   95,  257,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -224, -224, -224, -224, -224,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -225, -225, -225, -225, -225, -225, -225, -225, -225,
     -225, -225, -225, -225, -225, -225,   95,  258,   95,   95,
       95,   95,   95,   95,   95, -225, -225, -225, -225, -225,
     -225,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,

       95,   95,   95,   95, -225, -225, -225, -225, -225,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -226, -226, -226, -226, -226, -226, -226, -226, -226,
     -226, -226, -226, -226, -226, -226,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -226, -226, -226, -226, -226,
     -226,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,  259,   95,
       95,   95,   95,   95, -226, -226, -226, -226, -226,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -227, -227, -227, -227, -227, -227, -227, -227, -227,

     -227, -227, -227, -227, -227, -227,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -227, -227, -227, -227, -227,
     -227,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,  260,
       95,   95,   95,   95, -227, -227, -227, -227, -227,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -228, -228, -228, -228, -228, -228, -228, -228, -228,
     -228, -228, -228, -228, -228, -228,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -228, -228, -228, -228, -228,
     -228,   95,   95,  261,   95,   95,   95,   95,   95,   95,

       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -228, -228, -228, -228, -228,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -229, -229, -229, -229, -229, -229, -229, -229, -229,
     -229, -229, -229, -229, -229, -229,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -229, -229, -229, -229, -229,
     -229,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,  262,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -229, -229, -229, -229, -229,   96,
       97,   98,   99,  100,  101,  102,  103

    },

    {
        9, -230, -230, -230, -230, -230, -230, -230, -230, -230,
     -230, -230, -230, -230, -230, -230,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -230, -230, -230, -230, -230,
     -230,   95,   95,   95,   95,   95,  263,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -230, -230, -230, -230, -230,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -231, -231, -231, -231, -231, -231, -231, -231, -231,
     -231, -231, -231, -231, -231, -231,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -231, -231, -231, -231, -231,

     -231,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,  264,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -231, -231, -231, -231, -231,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -232, -232, -232, -232, -232, -232, -232, -232, -232,
     -232, -232, -232, -232, -232, -232,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -232, -232, -232, -232, -232,
     -232,   95,   95,   95,  265,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -232, -232, -232, -232, -232,   96,

       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -233, -233, -233, -233, -233, -233, -233, -233, -233,
     -233, -233, -233, -233, -233, -233,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -233, -233, -233, -233, -233,
     -233,   95,  266,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -233, -233, -233, -233, -233,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -234, -234, -234, -234, -234, -234, -234, -234, -234,
     -234, -234, -234, -234, -234, -234,   95,   95,   95,   95,

       95,   95,   95,   95,   95, -234, -234, -234, -234, -234,
     -234,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,  267,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -234, -234, -234, -234, -234,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -235, -235, -235, -235, -235, -235, -235, -235, -235,
     -235, -235, -235, -235, -235, -235,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -235, -235, -235, -235, -235,
     -235,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,

       95,   95,   95,   95, -235, -235, -235, -235, -235,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -236, -236, -236, -236, -236, -236, -236, -236, -236,
     -236, -236, -236, -236, -236, -236,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -236, -236, -236, -236, -236,
     -236,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,  268,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -236, -236, -236, -236, -236,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -237, -237, -237, -237, -237, -237, -237, -237, -237,

     -237, -237, -237, -237, -237, -237,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -237, -237, -237, -237, -237,
     -237,   95,   95,   95,   95,   95,  269,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -237, -237, -237, -237, -237,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -238, -238, -238, -238, -238, -238, -238, -238, -238,
     -238, -238, -238, -238, -238, -238,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -238, -238, -238, -238, -238,
     -238,   95,   95,   95,   95,   95,   95,   95,   95,   95,

      270,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -238, -238, -238, -238, -238,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -239, -239, -239, -239, -239, -239, -239, -239, -239,
     -239, -239, -239, -239, -239, -239,   95,   95,   95,  271,
       95,   95,  272,   95,   95, -239, -239, -239, -239, -239,
     -239,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -239, -239, -239, -239, -239,   96,
       97,   98,   99,  100,  101,  102,  103

    },

    {
        9, -240, -240, -240, -240, -240, -240, -240, -240, -240,
     -240, -240, -240, -240, -240, -240,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -240, -240, -240, -240, -240,
     -240,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,  273,   95,   95,
       95,   95,   95,   95, -240, -240, -240, -240, -240,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -241, -241, -241, -241, -241, -241, -241, -241, -241,
     -241, -241, -241, -241, -241, -241,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -241, -241, -241, -241, -241,

     -241,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,  274,   95,   95,
       95,   95,   95,   95, -241, -241, -241, -241, -241,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -242, -242, -242, -242, -242, -242, -242, -242, -242,
     -242, -242, -242, -242, -242, -242,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -242, -242, -242, -242, -242,
     -242,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,  275,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -242, -242, -242, -242, -242,   96,

       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -243, -243, -243, -243, -243, -243, -243, -243, -243,
     -243, -243, -243, -243, -243, -243,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -243, -243, -243, -243, -243,
     -243,   95,   95,   95,   95,   95,  276,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -243, -243, -243, -243, -243,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -244, -244, -244, -244, -244, -244, -244, -244, -244,
     -244, -244, -244, -244, -244, -244,   95,  277,   95,  278,

       95,   95,  279,  280,   95, -244, -244, -244, -244, -244,
     -244,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -244, -244, -244, -244, -244,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -245, -245, -245, -245, -245, -245, -245, -245, -245,
     -245, -245, -245, -245, -245, -245,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -245, -245, -245, -245, -245,
     -245,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,  281,   95,   95,   95,   95,   95,   95,

       95,   95,   95,   95, -245, -245, -245, -245, -245,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -246, -246, -246, -246, -246, -246, -246, -246, -246,
     -246, -246, -246, -246, -246, -246,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -246, -246, -246, -246, -246,
     -246,   95,   95,  282,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -246, -246, -246, -246, -246,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -247, -247, -247, -247, -247, -247, -247, -247, -247,

     -247, -247, -247, -247, -247, -247,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -247, -247, -247, -247, -247,
     -247,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,  283,   95,
       95,   95,   95,   95, -247, -247, -247, -247, -247,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -248, -248, -248, -248, -248, -248, -248, -248, -248,
     -248, -248, -248, -248, -248, -248,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -248, -248, -248, -248, -248,
     -248,   95,   95,   95,   95,   95,   95,   95,   95,   95,

       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -248, -248, -248, -248, -248,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -249, -249, -249, -249, -249, -249, -249, -249, -249,
     -249, -249, -249, -249, -249, -249,   95,  284,   95,  285,
       95,   95,  286,  287,   95, -249, -249, -249, -249, -249,
     -249,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -249, -249, -249, -249, -249,   96,
       97,   98,   99,  100,  101,  102,  103

    },

    {
        9, -250, -250, -250, -250, -250, -250, -250, -250, -250,
     -250, -250, -250, -250, -250, -250, -250, -250, -250, -250,
     -250, -250, -250, -250, -250, -250, -250, -250, -250, -250,
     -250, -250, -250, -250, -250, -250, -250, -250, -250, -250,
     -250, -250, -250, -250, -250, -250, -250, -250, -250, -250,
     -250, -250, -250, -250, -250, -250,  144,  144,  144, -250,
     -250, -250, -250, -250, -250, -250, -250
    },

    {
        9, -251, -251, -251, -251, -251, -251, -251, -251, -251,
     -251, -251, -251, -251, -251, -251, -251, -251, -251, -251,
     -251, -251, -251, -251, -251, -251, -251, -251, -251, -251,

     -251, -251, -251, -251, -251, -251, -251, -251, -251, -251,
     -251, -251, -251, -251, -251, -251, -251, -251, -251, -251,
     -251, -251, -251, -251, -251, -251,  144,  144,  144, -251,
     -251, -251, -251, -251, -251, -251, -251
    },

    {
        9, -252, -252, -252, -252, -252, -252, -252, -252, -252,
     -252, -252, -252, -252, -252, -252, -252, -252, -252, -252,
     -252, -252, -252, -252, -252, -252, -252, -252, -252, -252,
     -252, -252, -252, -252, -252, -252, -252, -252, -252, -252,
     -252, -252, -252, -252, -252, -252, -252, -252, -252, -252,
     -252, -252, -252, -252, -252, -252,  144,  144,  144, -252,

     -252, -252, -252, -252, -252, -252, -252
    },

    {
        9,   78,   78, -253, -253,   79,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,  288,  288,  288,  288,
      288,  288,  288,  288,  288,   78,   78,   78,   78,   80,
       78,   78,  288,  288,  288,  288,  288,  288,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78
    },

    {
        9, -254, -254, -254, -254, -254, -254, -254, -254, -254,
     -254, -254, -254, -254, -254, -254, -254, -254, -254, -254,

     -254, -254, -254, -254, -254, -254, -254, -254, -254, -254,
     -254, -254, -254, -254, -254, -254, -254, -254, -254, -254,
     -254, -254,  289, -254, -254, -254, -254, -254, -254, -254,
     -254, -254, -254, -254, -254, -254, -254, -254, -254, -254,
     -254, -254, -254, -254, -254, -254, -254
    },

    {
        9, -255, -255, -255, -255, -255, -255, -255,  163, -255,
     -255, -255, -255, -255, -255, -255,  290,  290,  290,  290,
      290,  290,  290,  290,  290, -255, -255, -255, -255, -255,
     -255, -255,  290,  290,  290,  290,  290,  290, -255, -255,
     -255, -255, -255, -255, -255, -255, -255, -255, -255, -255,

     -255, -255, -255, -255, -255, -255, -255, -255, -255, -255,
     -255, -255, -255, -255, -255, -255, -255
    },

    {
        9, -256, -256, -256, -256, -256, -256, -256, -256, -256,
     -256, -256, -256, -256, -256, -256,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -256, -256, -256, -256, -256,
     -256,   95,   95,   95,   95,   95,   95,   95,   95,   95,
      291,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -256, -256, -256, -256, -256,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -257, -257, -257, -257, -257, -257, -257, -257, -257,

     -257, -257, -257, -257, -257, -257,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -257, -257, -257, -257, -257,
     -257,   95,  292,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -257, -257, -257, -257, -257,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -258, -258, -258, -258, -258, -258, -258, -258, -258,
     -258, -258, -258, -258, -258, -258,   95,   95,   95,   95,
       95,   95,  293,   95,   95, -258, -258, -258, -258, -258,
     -258,   95,   95,   95,   95,   95,   95,   95,   95,   95,

       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -258, -258, -258, -258, -258,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -259, -259, -259, -259, -259, -259, -259, -259, -259,
     -259, -259, -259, -259, -259, -259,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -259, -259, -259, -259, -259,
     -259,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -259, -259, -259, -259, -259,   96,
       97,   98,   99,  100,  101,  102,  103

    },

    {
        9, -260, -260, -260, -260, -260, -260, -260, -260, -260,
     -260, -260, -260, -260, -260, -260,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -260, -260, -260, -260, -260,
     -260,   95,   95,   95,   95,   95,   95,   95,   95,   95,
      294,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -260, -260, -260, -260, -260,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -261, -261, -261, -261, -261, -261, -261, -261, -261,
     -261, -261, -261, -261, -261, -261,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -261, -261, -261, -261, -261,

     -261,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,  295,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -261, -261, -261, -261, -261,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -262, -262, -262, -262, -262, -262, -262, -262, -262,
     -262, -262, -262, -262, -262, -262,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -262, -262, -262, -262, -262,
     -262,   95,   95,   95,   95,   95,  296,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -262, -262, -262, -262, -262,   96,

       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -263, -263, -263, -263, -263, -263, -263, -263, -263,
     -263, -263, -263, -263, -263, -263,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -263, -263, -263, -263, -263,
     -263,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -263, -263, -263, -263, -263,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -264, -264, -264, -264, -264, -264, -264, -264, -264,
     -264, -264, -264, -264, -264, -264,   95,   95,   95,   95,

       95,   95,   95,   95,   95, -264, -264, -264, -264, -264,
     -264,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,  297,   95,   95,
       95,   95,   95,   95, -264, -264, -264, -264, -264,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -265, -265, -265, -265, -265, -265, -265, -265, -265,
     -265, -265, -265, -265, -265, -265,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -265, -265, -265, -265, -265,
     -265,   95,  298,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,

       95,   95,   95,   95, -265, -265, -265, -265, -265,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -266, -266, -266, -266, -266, -266, -266, -266, -266,
     -266, -266, -266, -266, -266, -266,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -266, -266, -266, -266, -266,
     -266,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,  299,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -266, -266, -266, -266, -266,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -267, -267, -267, -267, -267, -267, -267, -267, -267,

     -267, -267, -267, -267, -267, -267,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -267, -267, -267, -267, -267,
     -267,   95,   95,   95,   95,  300,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -267, -267, -267, -267, -267,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -268, -268, -268, -268, -268, -268, -268, -268, -268,
     -268, -268, -268, -268, -268, -268,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -268, -268, -268, -268, -268,
     -268,   95,   95,   95,   95,   95,  301,   95,   95,   95,

       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -268, -268, -268, -268, -268,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -269, -269, -269, -269, -269, -269, -269, -269, -269,
     -269, -269, -269, -269, -269, -269,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -269, -269, -269, -269, -269,
     -269,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,  302,   95,   95,
       95,   95,   95,   95, -269, -269, -269, -269, -269,   96,
       97,   98,   99,  100,  101,  102,  103

    },

    {
        9, -270, -270, -270, -270, -270, -270, -270, -270, -270,
     -270, -270, -270, -270, -270, -270,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -270, -270, -270, -270, -270,
     -270,   95,   95,   95,   95,   95,   95,  303,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -270, -270, -270, -270, -270,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -271, -271, -271, -271, -271, -271, -271, -271, -271,
     -271, -271, -271, -271, -271, -271,   95,   95,  304,   95,
       95,   95,   95,   95,   95, -271, -271, -271, -271, -271,

     -271,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -271, -271, -271, -271, -271,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -272, -272, -272, -272, -272, -272, -272, -272, -272,
     -272, -272, -272, -272, -272, -272,   95,   95,   95,   95,
      305,   95,   95,   95,   95, -272, -272, -272, -272, -272,
     -272,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -272, -272, -272, -272, -272,   96,

       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -273, -273, -273, -273, -273, -273, -273, -273, -273,
     -273, -273, -273, -273, -273, -273,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -273, -273, -273, -273, -273,
     -273,   95,   95,   95,   95,   95,  306,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -273, -273, -273, -273, -273,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -274, -274, -274, -274, -274, -274, -274, -274, -274,
     -274, -274, -274, -274, -274, -274,   95,   95,   95,   95,

       95,   95,   95,   95,   95, -274, -274, -274, -274, -274,
     -274,   95,   95,   95,   95,   95,   95,   95,   95,   95,
      307,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -274, -274, -274, -274, -274,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -275, -275, -275, -275, -275, -275, -275, -275, -275,
     -275, -275, -275, -275, -275, -275,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -275, -275, -275, -275, -275,
     -275,   95,  308,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,

       95,   95,   95,   95, -275, -275, -275, -275, -275,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -276, -276, -276, -276, -276, -276, -276, -276, -276,
     -276, -276, -276, -276, -276, -276,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -276, -276, -276, -276, -276,
     -276,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -276, -276, -276, -276, -276,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -277, -277, -277, -277, -277, -277, -277, -277, -277,

     -277, -277, -277, -277, -277, -277,   95,   95,   95,   95,
       95,   95,  309,   95,   95, -277, -277, -277, -277, -277,
     -277,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -277, -277, -277, -277, -277,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -278, -278, -278, -278, -278, -278, -278, -278, -278,
     -278, -278, -278, -278, -278, -278,   95,   95,  310,   95,
       95,   95,   95,   95,   95, -278, -278, -278, -278, -278,
     -278,   95,   95,   95,   95,   95,   95,   95,   95,   95,

       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -278, -278, -278, -278, -278,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -279, -279, -279, -279, -279, -279, -279, -279, -279,
     -279, -279, -279, -279, -279, -279,   95,   95,   95,   95,
      311,   95,   95,   95,   95, -279, -279, -279, -279, -279,
     -279,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -279, -279, -279, -279, -279,   96,
       97,   98,   99,  100,  101,  102,  103

    },

    {
        9, -280, -280, -280, -280, -280, -280, -280, -280, -280,
     -280, -280, -280, -280, -280, -280,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -280, -280, -280, -280, -280,
     -280,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -280, -280, -280, -280, -280,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -281, -281, -281, -281, -281, -281, -281, -281, -281,
     -281, -281, -281, -281, -281, -281,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -281, -281, -281, -281, -281,

     -281,   95,   95,   95,   95,   95,   95,   95,  312,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -281, -281, -281, -281, -281,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -282, -282, -282, -282, -282, -282, -282, -282, -282,
     -282, -282, -282, -282, -282, -282,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -282, -282, -282, -282, -282,
     -282,   95,   95,   95,  313,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -282, -282, -282, -282, -282,   96,

       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -283, -283, -283, -283, -283, -283, -283, -283, -283,
     -283, -283, -283, -283, -283, -283,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -283, -283, -283, -283, -283,
     -283,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,  314,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -283, -283, -283, -283, -283,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -284, -284, -284, -284, -284, -284, -284, -284, -284,
     -284, -284, -284, -284, -284, -284,   95,   95,   95,   95,

       95,   95,  315,   95,   95, -284, -284, -284, -284, -284,
     -284,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -284, -284, -284, -284, -284,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -285, -285, -285, -285, -285, -285, -285, -285, -285,
     -285, -285, -285, -285, -285, -285,   95,   95,  316,   95,
       95,   95,   95,   95,   95, -285, -285, -285, -285, -285,
     -285,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,

       95,   95,   95,   95, -285, -285, -285, -285, -285,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -286, -286, -286, -286, -286, -286, -286, -286, -286,
     -286, -286, -286, -286, -286, -286,   95,   95,   95,   95,
      317,   95,   95,   95,   95, -286, -286, -286, -286, -286,
     -286,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -286, -286, -286, -286, -286,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -287, -287, -287, -287, -287, -287, -287, -287, -287,

     -287, -287, -287, -287, -287, -287,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -287, -287, -287, -287, -287,
     -287,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -287, -287, -287, -287, -287,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9,   78,   78, -288, -288,   79,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,  318,  318,  318,  318,
      318,  318,  318,  318,  318,   78,   78,   78,   78,   80,
       78,   78,  318,  318,  318,  318,  318,  318,   78,   78,

       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78
    },

    {
        9, -289, -289, -289, -289, -289, -289, -289, -289, -289,
     -289, -289, -289, -289, -289, -289, -289, -289, -289, -289,
     -289, -289, -289, -289, -289, -289, -289, -289, -289, -289,
     -289, -289,  319, -289, -289, -289, -289, -289, -289, -289,
     -289, -289, -289, -289, -289, -289, -289, -289, -289, -289,
     -289, -289, -289, -289, -289, -289, -289, -289, -289, -289,
     -289, -289, -289, -289, -289, -289, -289

    },

    {
        9, -290, -290, -290, -290, -290, -290, -290,  163, -290,
     -290, -290, -290, -290, -290, -290,   82,   82,   82,   82,
       82,   82,   82,   82,   82, -290, -290, -290, -290, -290,
     -290, -290,   82,   82,   82,   82,   82,   82, -290, -290,
     -290, -290, -290, -290, -290, -290, -290, -290, -290, -290,
     -290, -290, -290, -290, -290, -290, -290, -290, -290, -290,
     -290, -290, -290, -290, -290, -290, -290
    },

    {
        9, -291, -291, -291, -291, -291, -291, -291, -291, -291,
     -291, -291, -291, -291, -291, -291,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -291, -291, -291, -291, -291,

     -291,   95,  320,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -291, -291, -291, -291, -291,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -292, -292, -292, -292, -292, -292, -292, -292, -292,
     -292, -292, -292, -292, -292, -292,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -292, -292, -292, -292, -292,
     -292,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,  321,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -292, -292, -292, -292, -292,   96,

       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -293, -293, -293, -293, -293, -293, -293, -293, -293,
     -293, -293, -293, -293, -293, -293,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -293, -293, -293, -293, -293,
     -293,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -293, -293, -293, -293, -293,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -294, -294, -294, -294, -294, -294, -294, -294, -294,
     -294, -294, -294, -294, -294, -294,   95,   95,   95,   95,

       95,   95,   95,   95,   95, -294, -294, -294, -294, -294,
     -294,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,  322,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -294, -294, -294, -294, -294,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -295, -295, -295, -295, -295, -295, -295, -295, -295,
     -295, -295, -295, -295, -295, -295,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -295, -295, -295, -295, -295,
     -295,   95,   95,   95,   95,   95,  323,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,

       95,   95,   95,   95, -295, -295, -295, -295, -295,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -296, -296, -296, -296, -296, -296, -296, -296, -296,
     -296, -296, -296, -296, -296, -296,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -296, -296, -296, -296, -296,
     -296,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,  324,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -296, -296, -296, -296, -296,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -297, -297, -297, -297, -297, -297, -297, -297, -297,

     -297, -297, -297, -297, -297, -297,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -297, -297, -297, -297, -297,
     -297,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -297, -297, -297, -297, -297,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -298, -298, -298, -298, -298, -298, -298, -298, -298,
     -298, -298, -298, -298, -298, -298,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -298, -298, -298, -298, -298,
     -298,   95,   95,   95,   95,   95,   95,   95,   95,   95,

       95,   95,   95,   95,   95,   95,   95,   95,   95,  325,
       95,   95,   95,   95, -298, -298, -298, -298, -298,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -299, -299, -299, -299, -299, -299, -299, -299, -299,
     -299, -299, -299, -299, -299, -299,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -299, -299, -299, -299, -299,
     -299,   95,   95,   95,  326,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -299, -299, -299, -299, -299,   96,
       97,   98,   99,  100,  101,  102,  103

    },

    {
        9, -300, -300, -300, -300, -300, -300, -300, -300, -300,
     -300, -300, -300, -300, -300, -300,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -300, -300, -300, -300, -300,
     -300,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -300, -300, -300, -300, -300,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -301, -301, -301, -301, -301, -301, -301, -301, -301,
     -301, -301, -301, -301, -301, -301,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -301, -301, -301, -301, -301,

     -301,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,  327,
       95,   95,   95,   95, -301, -301, -301, -301, -301,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -302, -302, -302, -302, -302, -302, -302, -302, -302,
     -302, -302, -302, -302, -302, -302,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -302, -302, -302, -302, -302,
     -302,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,  328,
       95,   95,   95,   95, -302, -302, -302, -302, -302,   96,

       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -303, -303, -303, -303, -303, -303, -303, -303, -303,
     -303, -303, -303, -303, -303, -303,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -303, -303, -303, -303, -303,
     -303,   95,   95,   95,   95,   95,   95,   95,   95,   95,
      329,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -303, -303, -303, -303, -303,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -304, -304, -304, -304, -304, -304, -304, -304, -304,
     -304, -304, -304, -304, -304, -304,   95,   95,   95,   95,

       95,   95,   95,   95,   95, -304, -304, -304, -304, -304,
     -304,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -304, -304, -304, -304, -304,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -305, -305, -305, -305, -305, -305, -305, -305, -305,
     -305, -305, -305, -305, -305, -305,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -305, -305, -305, -305, -305,
     -305,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,

       95,   95,   95,   95, -305, -305, -305, -305, -305,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -306, -306, -306, -306, -306, -306, -306, -306, -306,
     -306, -306, -306, -306, -306, -306,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -306, -306, -306, -306, -306,
     -306,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,  330,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -306, -306, -306, -306, -306,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -307, -307, -307, -307, -307, -307, -307, -307, -307,

     -307, -307, -307, -307, -307, -307,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -307, -307, -307, -307, -307,
     -307,   95,   95,   95,  331,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -307, -307, -307, -307, -307,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -308, -308, -308, -308, -308, -308, -308, -308, -308,
     -308, -308, -308, -308, -308, -308,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -308, -308, -308, -308, -308,
     -308,   95,   95,   95,   95,   95,   95,   95,   95,   95,

       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -308, -308, -308, -308, -308,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -309, -309, -309, -309, -309, -309, -309, -309, -309,
     -309, -309, -309, -309, -309, -309,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -309, -309, -309, -309, -309,
     -309,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -309, -309, -309, -309, -309,   96,
       97,   98,   99,  100,  101,  102,  103

    },

    {
        9, -310, -310, -310, -310, -310, -310, -310, -310, -310,
     -310, -310, -310, -310, -310, -310,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -310, -310, -310, -310, -310,
     -310,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -310, -310, -310, -310, -310,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -311, -311, -311, -311, -311, -311, -311, -311, -311,
     -311, -311, -311, -311, -311, -311,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -311, -311, -311, -311, -311,

     -311,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -311, -311, -311, -311, -311,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -312, -312, -312, -312, -312, -312, -312, -312, -312,
     -312, -312, -312, -312, -312, -312,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -312, -312, -312, -312, -312,
     -312,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -312, -312, -312, -312, -312,   96,

       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -313, -313, -313, -313, -313, -313, -313, -313, -313,
     -313, -313, -313, -313, -313, -313,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -313, -313, -313, -313, -313,
     -313,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,  332,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -313, -313, -313, -313, -313,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -314, -314, -314, -314, -314, -314, -314, -314, -314,
     -314, -314, -314, -314, -314, -314,   95,   95,   95,   95,

       95,   95,   95,   95,   95, -314, -314, -314, -314, -314,
     -314,   95,  333,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -314, -314, -314, -314, -314,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -315, -315, -315, -315, -315, -315, -315, -315, -315,
     -315, -315, -315, -315, -315, -315,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -315, -315, -315, -315, -315,
     -315,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,

       95,   95,   95,   95, -315, -315, -315, -315, -315,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -316, -316, -316, -316, -316, -316, -316, -316, -316,
     -316, -316, -316, -316, -316, -316,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -316, -316, -316, -316, -316,
     -316,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -316, -316, -316, -316, -316,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -317, -317, -317, -317, -317, -317, -317, -317, -317,

     -317, -317, -317, -317, -317, -317,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -317, -317, -317, -317, -317,
     -317,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -317, -317, -317, -317, -317,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9,   78,   78, -318, -318,   79,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   80,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,

       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78,   78,   78,   78,
       78,   78,   78,   78,   78,   78,   78
    },

    {
        9, -319, -319, -319, -319, -319, -319, -319, -319, -319,
     -319, -319, -319, -319, -319, -319, -319, -319, -319, -319,
     -319, -319, -319, -319, -319, -319, -319, -319, -319, -319,
     -319, -319, -319, -319, -319, -319, -319, -319, -319, -319,
     -319, -319, -319, -319, -319, -319, -319, -319, -319, -319,
     -319, -319, -319, -319, -319, -319, -319, -319, -319, -319,
     -319, -319, -319, -319, -319, -319, -319

    },

    {
        9, -320, -320, -320, -320, -320, -320, -320, -320, -320,
     -320, -320, -320, -320, -320, -320,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -320, -320, -320, -320, -320,
     -320,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,  334,
       95,   95,   95,   95, -320, -320, -320, -320, -320,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -321, -321, -321, -321, -321, -321, -321, -321, -321,
     -321, -321, -321, -321, -321, -321,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -321, -321, -321, -321, -321,

     -321,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -321, -321, -321, -321, -321,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -322, -322, -322, -322, -322, -322, -322, -322, -322,
     -322, -322, -322, -322, -322, -322,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -322, -322, -322, -322, -322,
     -322,   95,   95,   95,   95,   95,  335,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -322, -322, -322, -322, -322,   96,

       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -323, -323, -323, -323, -323, -323, -323, -323, -323,
     -323, -323, -323, -323, -323, -323,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -323, -323, -323, -323, -323,
     -323,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,  336,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -323, -323, -323, -323, -323,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -324, -324, -324, -324, -324, -324, -324, -324, -324,
     -324, -324, -324, -324, -324, -324,   95,   95,   95,   95,

       95,   95,   95,   95,   95, -324, -324, -324, -324, -324,
     -324,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,  337,   95,   95, -324, -324, -324, -324, -324,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -325, -325, -325, -325, -325, -325, -325, -325, -325,
     -325, -325, -325, -325, -325, -325,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -325, -325, -325, -325, -325,
     -325,   95,   95,   95,   95,   95,   95,   95,   95,   95,
      338,   95,   95,   95,   95,   95,   95,   95,   95,   95,

       95,   95,   95,   95, -325, -325, -325, -325, -325,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -326, -326, -326, -326, -326, -326, -326, -326, -326,
     -326, -326, -326, -326, -326, -326,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -326, -326, -326, -326, -326,
     -326,   95,   95,   95,   95,   95,  339,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -326, -326, -326, -326, -326,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -327, -327, -327, -327, -327, -327, -327, -327, -327,

     -327, -327, -327, -327, -327, -327,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -327, -327, -327, -327, -327,
     -327,   95,   95,   95,   95,   95,  340,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -327, -327, -327, -327, -327,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -328, -328, -328, -328, -328, -328, -328, -328, -328,
     -328, -328, -328, -328, -328, -328,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -328, -328, -328, -328, -328,
     -328,   95,   95,   95,   95,   95,   95,   95,   95,   95,

       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,  341, -328, -328, -328, -328, -328,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -329, -329, -329, -329, -329, -329, -329, -329, -329,
     -329, -329, -329, -329, -329, -329,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -329, -329, -329, -329, -329,
     -329,   95,   95,   95,   95,   95,  342,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -329, -329, -329, -329, -329,   96,
       97,   98,   99,  100,  101,  102,  103

    },

    {
        9, -330, -330, -330, -330, -330, -330, -330, -330, -330,
     -330, -330, -330, -330, -330, -330,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -330, -330, -330, -330, -330,
     -330,   95,   95,   95,  343,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -330, -330, -330, -330, -330,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -331, -331, -331, -331, -331, -331, -331, -331, -331,
     -331, -331, -331, -331, -331, -331,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -331, -331, -331, -331, -331,

     -331,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,  344,
       95,   95,   95,   95, -331, -331, -331, -331, -331,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -332, -332, -332, -332, -332, -332, -332, -332, -332,
     -332, -332, -332, -332, -332, -332,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -332, -332, -332, -332, -332,
     -332,   95,  345,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -332, -332, -332, -332, -332,   96,

       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -333, -333, -333, -333, -333, -333, -333, -333, -333,
     -333, -333, -333, -333, -333, -333,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -333, -333, -333, -333, -333,
     -333,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,  346,
       95,   95,   95,   95, -333, -333, -333, -333, -333,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -334, -334, -334, -334, -334, -334, -334, -334, -334,
     -334, -334, -334, -334, -334, -334,   95,   95,   95,   95,

       95,   95,   95,   95,   95, -334, -334, -334, -334, -334,
     -334,   95,   95,   95,   95,   95,   95,   95,   95,   95,
      347,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -334, -334, -334, -334, -334,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -335, -335, -335, -335, -335, -335, -335, -335, -335,
     -335, -335, -335, -335, -335, -335,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -335, -335, -335, -335, -335,
     -335,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,

       95,   95,   95,   95, -335, -335, -335, -335, -335,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -336, -336, -336, -336, -336, -336, -336, -336, -336,
     -336, -336, -336, -336, -336, -336,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -336, -336, -336, -336, -336,
     -336,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,  348,   95,   95, -336, -336, -336, -336, -336,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -337, -337, -337, -337, -337, -337, -337, -337, -337,

     -337, -337, -337, -337, -337, -337,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -337, -337, -337, -337, -337,
     -337,   95,   95,   95,   95,   95,  349,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -337, -337, -337, -337, -337,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -338, -338, -338, -338, -338, -338, -338, -338, -338,
     -338, -338, -338, -338, -338, -338,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -338, -338, -338, -338, -338,
     -338,   95,   95,   95,   95,   95,   95,   95,   95,   95,

       95,   95,   95,   95,  350,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -338, -338, -338, -338, -338,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -339, -339, -339, -339, -339, -339, -339, -339, -339,
     -339, -339, -339, -339, -339, -339,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -339, -339, -339, -339, -339,
     -339,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -339, -339, -339, -339, -339,   96,
       97,   98,   99,  100,  101,  102,  103

    },

    {
        9, -340, -340, -340, -340, -340, -340, -340, -340, -340,
     -340, -340, -340, -340, -340, -340,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -340, -340, -340, -340, -340,
     -340,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,  351,   95,   95,
       95,   95,   95,   95, -340, -340, -340, -340, -340,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -341, -341, -341, -341, -341, -341, -341, -341, -341,
     -341, -341, -341, -341, -341, -341,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -341, -341, -341, -341, -341,

     -341,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -341, -341, -341, -341, -341,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -342, -342, -342, -342, -342, -342, -342, -342, -342,
     -342, -342, -342, -342, -342, -342,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -342, -342, -342, -342, -342,
     -342,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,  352,   95,   95,
       95,   95,   95,   95, -342, -342, -342, -342, -342,   96,

       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -343, -343, -343, -343, -343, -343, -343, -343, -343,
     -343, -343, -343, -343, -343, -343,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -343, -343, -343, -343, -343,
     -343,   95,   95,   95,   95,   95,  353,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -343, -343, -343, -343, -343,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -344, -344, -344, -344, -344, -344, -344, -344, -344,
     -344, -344, -344, -344, -344, -344,   95,   95,   95,   95,

       95,   95,   95,   95,   95, -344, -344, -344, -344, -344,
     -344,   95,   95,   95,   95,   95,  354,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -344, -344, -344, -344, -344,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -345, -345, -345, -345, -345, -345, -345, -345, -345,
     -345, -345, -345, -345, -345, -345,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -345, -345, -345, -345, -345,
     -345,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,  355,   95,

       95,   95,   95,   95, -345, -345, -345, -345, -345,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -346, -346, -346, -346, -346, -346, -346, -346, -346,
     -346, -346, -346, -346, -346, -346,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -346, -346, -346, -346, -346,
     -346,   95,  356,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -346, -346, -346, -346, -346,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -347, -347, -347, -347, -347, -347, -347, -347, -347,

     -347, -347, -347, -347, -347, -347,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -347, -347, -347, -347, -347,
     -347,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,  357,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -347, -347, -347, -347, -347,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -348, -348, -348, -348, -348, -348, -348, -348, -348,
     -348, -348, -348, -348, -348, -348,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -348, -348, -348, -348, -348,
     -348,   95,   95,   95,   95,   95,  358,   95,   95,   95,

       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -348, -348, -348, -348, -348,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -349, -349, -349, -349, -349, -349, -349, -349, -349,
     -349, -349, -349, -349, -349, -349,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -349, -349, -349, -349, -349,
     -349,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,  359,   95,   95,
       95,   95,   95,   95, -349, -349, -349, -349, -349,   96,
       97,   98,   99,  100,  101,  102,  103

    },

    {
        9, -350, -350, -350, -350, -350, -350, -350, -350, -350,
     -350, -350, -350, -350, -350, -350,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -350, -350, -350, -350, -350,
     -350,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,  360,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -350, -350, -350, -350, -350,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -351, -351, -351, -351, -351, -351, -351, -351, -351,
     -351, -351, -351, -351, -351, -351,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -351, -351, -351, -351, -351,

     -351,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -351, -351, -351, -351, -351,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -352, -352, -352, -352, -352, -352, -352, -352, -352,
     -352, -352, -352, -352, -352, -352,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -352, -352, -352, -352, -352,
     -352,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -352, -352, -352, -352, -352,   96,

       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -353, -353, -353, -353, -353, -353, -353, -353, -353,
     -353, -353, -353, -353, -353, -353,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -353, -353, -353, -353, -353,
     -353,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -353, -353, -353, -353, -353,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -354, -354, -354, -354, -354, -354, -354, -354, -354,
     -354, -354, -354, -354, -354, -354,   95,   95,   95,   95,

       95,   95,   95,   95,   95, -354, -354, -354, -354, -354,
     -354,   95,   95,   95,   95,  361,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -354, -354, -354, -354, -354,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -355, -355, -355, -355, -355, -355, -355, -355, -355,
     -355, -355, -355, -355, -355, -355,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -355, -355, -355, -355, -355,
     -355,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,  362,   95,

       95,   95,   95,   95, -355, -355, -355, -355, -355,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -356, -356, -356, -356, -356, -356, -356, -356, -356,
     -356, -356, -356, -356, -356, -356,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -356, -356, -356, -356, -356,
     -356,   95,   95,  363,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -356, -356, -356, -356, -356,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -357, -357, -357, -357, -357, -357, -357, -357, -357,

     -357, -357, -357, -357, -357, -357,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -357, -357, -357, -357, -357,
     -357,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,  364,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -357, -357, -357, -357, -357,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -358, -358, -358, -358, -358, -358, -358, -358, -358,
     -358, -358, -358, -358, -358, -358,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -358, -358, -358, -358, -358,
     -358,   95,   95,   95,   95,   95,   95,   95,   95,   95,

       95,   95,   95,   95,   95,   95,   95,  365,   95,   95,
       95,   95,   95,   95, -358, -358, -358, -358, -358,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -359, -359, -359, -359, -359, -359, -359, -359, -359,
     -359, -359, -359, -359, -359, -359,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -359, -359, -359, -359, -359,
     -359,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,  366,   95,   95,
       95,   95,   95,   95, -359, -359, -359, -359, -359,   96,
       97,   98,   99,  100,  101,  102,  103

    },

    {
        9, -360, -360, -360, -360, -360, -360, -360, -360, -360,
     -360, -360, -360, -360, -360, -360,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -360, -360, -360, -360, -360,
     -360,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -360, -360, -360, -360, -360,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -361, -361, -361, -361, -361, -361, -361, -361, -361,
     -361, -361, -361, -361, -361, -361,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -361, -361, -361, -361, -361,

     -361,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -361, -361, -361, -361, -361,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -362, -362, -362, -362, -362, -362, -362, -362, -362,
     -362, -362, -362, -362, -362, -362,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -362, -362, -362, -362, -362,
     -362,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -362, -362, -362, -362, -362,   96,

       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -363, -363, -363, -363, -363, -363, -363, -363, -363,
     -363, -363, -363, -363, -363, -363,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -363, -363, -363, -363, -363,
     -363,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,  367,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -363, -363, -363, -363, -363,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -364, -364, -364, -364, -364, -364, -364, -364, -364,
     -364, -364, -364, -364, -364, -364,   95,   95,   95,   95,

       95,   95,   95,   95,   95, -364, -364, -364, -364, -364,
     -364,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -364, -364, -364, -364, -364,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -365, -365, -365, -365, -365, -365, -365, -365, -365,
     -365, -365, -365, -365, -365, -365,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -365, -365, -365, -365, -365,
     -365,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,  368,   95,   95,

       95,   95,   95,   95, -365, -365, -365, -365, -365,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -366, -366, -366, -366, -366, -366, -366, -366, -366,
     -366, -366, -366, -366, -366, -366,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -366, -366, -366, -366, -366,
     -366,   95,   95,   95,   95,   95,   95,   95,   95,   95,
      369,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -366, -366, -366, -366, -366,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -367, -367, -367, -367, -367, -367, -367, -367, -367,

     -367, -367, -367, -367, -367, -367,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -367, -367, -367, -367, -367,
     -367,   95,   95,   95,   95,   95,  370,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -367, -367, -367, -367, -367,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -368, -368, -368, -368, -368, -368, -368, -368, -368,
     -368, -368, -368, -368, -368, -368,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -368, -368, -368, -368, -368,
     -368,   95,   95,   95,   95,   95,   95,   95,   95,   95,

      371,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -368, -368, -368, -368, -368,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -369, -369, -369, -369, -369, -369, -369, -369, -369,
     -369, -369, -369, -369, -369, -369,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -369, -369, -369, -369, -369,
     -369,   95,   95,   95,   95,  372,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -369, -369, -369, -369, -369,   96,
       97,   98,   99,  100,  101,  102,  103

    },

    {
        9, -370, -370, -370, -370, -370, -370, -370, -370, -370,
     -370, -370, -370, -370, -370, -370,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -370, -370, -370, -370, -370,
     -370,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -370, -370, -370, -370, -370,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -371, -371, -371, -371, -371, -371, -371, -371, -371,
     -371, -371, -371, -371, -371, -371,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -371, -371, -371, -371, -371,

     -371,   95,   95,   95,   95,  373,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -371, -371, -371, -371, -371,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -372, -372, -372, -372, -372, -372, -372, -372, -372,
     -372, -372, -372, -372, -372, -372,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -372, -372, -372, -372, -372,
     -372,   95,   95,   95,   95,   95,  374,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -372, -372, -372, -372, -372,   96,

       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -373, -373, -373, -373, -373, -373, -373, -373, -373,
     -373, -373, -373, -373, -373, -373,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -373, -373, -373, -373, -373,
     -373,   95,   95,   95,   95,   95,  375,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -373, -373, -373, -373, -373,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -374, -374, -374, -374, -374, -374, -374, -374, -374,
     -374, -374, -374, -374, -374, -374,   95,   95,   95,   95,

       95,   95,   95,   95,   95, -374, -374, -374, -374, -374,
     -374,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95, -374, -374, -374, -374, -374,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    {
        9, -375, -375, -375, -375, -375, -375, -375, -375, -375,
     -375, -375, -375, -375, -375, -375,   95,   95,   95,   95,
       95,   95,   95,   95,   95, -375, -375, -375, -375, -375,
     -375,   95,   95,   95,   95,   95,   95,   95,   95,   95,
       95,   95,   95,   95,   95,   95,   95,   95,   95,   95,

       95,   95,   95,   95, -375, -375, -375, -375, -375,   96,
       97,   98,   99,  100,  101,  102,  103
    },

    } ;

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up owmoftext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	owmofleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 77
#define YY_END_OF_BUFFER 78
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[376] =
    {   0,
       71,   71,    2,    2,    9,    9,   13,   13,   78,   77,
       15,   17,   18,   77,   77,   66,   77,   58,   59,   71,
       65,   77,   77,   71,   71,   71,   67,   62,   68,   63,
       64,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   60,   61,
       77,   77,   77,   77,   77,   77,   77,   77,    2,    5,
        6,    3,    9,   11,   12,   13,   14,   77,   77,   77,
       77,   77,   77,   77,   77,   15,   16,    0,   75,    0,
        0,    0,    0,    0,   71,   71,   71,   73,    1,    8,
       70,   70,   69,    0,   76,    0,    0,    0,    0,    0,

        0,    0,    0,   76,   20,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   45,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,    0,    0,
        0,    0,    0,    0,    0,    2,    4,    3,    3,    7,
        9,   10,   13,   14,    0,    0,    0,    0,    0,    0,
        0,    0,   14,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   74,    0,    0,   72,    0,    0,    0,    0,
        0,    0,    0,   19,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   50,   76,   76,   76,   76,   76,   76,   76,   76,

       76,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   73,    0,
        0,    0,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   44,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   57,   76,    0,
        0,    0,    0,    0,    0,   76,   76,   76,   22,   76,
       76,   76,   39,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   54,   76,   76,   76,   32,
       76,   76,   76,   76,   76,   76,   37,    0,    0,    0,
       76,   76,   25,   76,   76,   76,   40,   76,   76,   43,

       76,   76,   76,   27,   28,   76,   76,   53,   29,   30,
       31,   33,   76,   76,   34,   35,   36,    0,   47,   76,
       24,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   26,   76,   76,   76,   42,   76,
       48,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       46,   49,   51,   76,   76,   76,   76,   76,   76,   41,
       52,   55,   76,   21,   76,   76,   76,   76,   76,   56,
       76,   76,   76,   38,   23
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    7,    1,    1,    8,    9,
       10,   11,   12,   13,   12,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   21,   23,   24,   25,   26,    1,
       27,    1,    1,    1,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   31,   31,   41,   42,   43,   44,   45,
       46,   47,   48,   49,   50,   51,   31,   52,   53,   31,
       28,   29,   30,    1,   31,    1,   32,   33,   34,   35,

       36,   37,   38,   39,   40,   31,   31,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   31,   52,
       53,   31,   54,    1,   55,    1,    1,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,    1,    1,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   60,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   61,   61,   61,   62,   63,   63,   64,
       65,   65,   65,   66,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int owmof_flex_debug;
int owmof_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *owmoftext;
#line 1 "OW_MOFLexer.ll"
/*******************************************************************************
* Copyright (C) 2001 Vintela, Inc. All rights reserved.
*
* Redistribution and use in source and binary forms, with or without
* modification, are permitted provided that the following conditions are met:
*
*  - Redistributions of source code must retain the above copyright notice,
*    this list of conditions and the following disclaimer.
*
*  - Redistributions in binary form must reproduce the above copyright notice,
*    this list of conditions and the following disclaimer in the documentation
*    and/or other materials provided with the distribution.
*
*  - Neither the name of Vintela, Inc. nor the names of its
*    contributors may be used to endorse or promote products derived from this
*    software without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS''
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
* ARE DISCLAIMED. IN NO EVENT SHALL Vintela, Inc. OR THE CONTRIBUTORS
* BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
* POSSIBILITY OF SUCH DAMAGE.
*******************************************************************************/
/**
 * @author Dan Nuffer
 */
/* scanner for mof */
#line 41 "OW_MOFLexer.ll"
#include "OW_MOFGrammar.hpp"
#include "OW_MOFCompiler.hpp"
#include "OW_Format.hpp"
#include "OW_Exception.hpp"
#include <errno.h>
#include <string.h>

// since OW_MOFParser.h is generated we can't control it.  We need to do something
// bad, but we don't have a choice.  These using statements have to be before
// the include or things will break!
using namespace OpenWBEM;
using namespace OpenWBEM::MOF;
#include "OW_MOFParser.h"

#define WHITE_RETURN(x) /* skip it */
#define NEWLINE_RETURN() WHITE_RETURN('\n')

#define RETURN_VAL(x) owmoflval->pString = 0; return(x);
#define RETURN_STR(x) owmoflval->pString = new String(owmoftext); return(x);

namespace OW_NAMESPACE
{
OW_DECLARE_EXCEPTION(MOFLexer)
OW_DEFINE_EXCEPTION(MOFLexer)
}

/* Avoid exit() on fatal scanner errors (a bit ugly -- see yy_fatal_error) */
#define YY_FATAL_ERROR(msg) \
	OW_THROW(OpenWBEM::MOFLexerException, msg);

#define YYLEX_PARAM context
#define YY_DECL int owmoflex(YYSTYPE *owmoflval, void* YYLEX_PARAM)
#define MOF_COMPILER (reinterpret_cast<Compiler*>(context))
/* here are the definitions */
/* UTF-8 (from Unicode 4.0.0 standard):
Table 3-6. Well-Formed UTF-8 Byte Sequences Code Points 
                   1st Byte 2nd Byte 3rd Byte 4th Byte 
U+0000..U+007F     00..7F 
U+0080..U+07FF     C2..DF   80..BF 
U+0800..U+0FFF     E0       A0..BF   80..BF 
U+1000..U+CFFF     E1..EC   80..BF   80..BF 
U+D000..U+D7FF     ED       80..9F   80..BF 
U+E000..U+FFFF     EE..EF   80..BF   80..BF 
U+10000..U+3FFFF   F0       90..BF   80..BF   80..BF 
U+40000..U+FFFFF   F1..F3   80..BF   80..BF   80..BF 
U+100000..U+10FFFF F4       80..8F   80..BF   80..BF
*/

#line 4569 "OW_MOFLexer.cc"

#define INITIAL 0
#define Ccomment 1
#define CPPcomment 2
#define OnlyIdentifier 3

/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int owmofwrap (void );
#else
extern int owmofwrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( owmoftext, owmofleng, 1, owmofout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( owmofin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( owmofin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, owmofin))==0 && ferror(owmofin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(owmofin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int owmoflex (void);

#define YY_DECL int owmoflex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after owmoftext and owmofleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 124 "OW_MOFLexer.ll"



#line 4725 "OW_MOFLexer.cc"

	if ( (yy_init) )
		{
		(yy_init) = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! owmofin )
			owmofin = stdin;

		if ( ! owmofout )
			owmofout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			owmofensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				owmof_create_buffer(owmofin,YY_BUF_SIZE );
		}

		owmof_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of owmoftext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		while ( (yy_current_state = yy_nxt[yy_current_state][ yy_ec[YY_SC_TO_UI(*yy_cp)]  ]) > 0 )
			{
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}

			++yy_cp;
			}

		yy_current_state = -yy_current_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos) + 1;
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 127 "OW_MOFLexer.ll"
BEGIN(Ccomment);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 128 "OW_MOFLexer.ll"
/* eat anything that's not a '*' */
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 129 "OW_MOFLexer.ll"
/* eat up '*'s not followed by '/'s */
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 130 "OW_MOFLexer.ll"
++MOF_COMPILER->theLineInfo.lineNum;
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 131 "OW_MOFLexer.ll"
++MOF_COMPILER->theLineInfo.lineNum;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 132 "OW_MOFLexer.ll"
++MOF_COMPILER->theLineInfo.lineNum;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 133 "OW_MOFLexer.ll"
BEGIN(INITIAL);
	YY_BREAK
case YY_STATE_EOF(Ccomment):
#line 134 "OW_MOFLexer.ll"
{
	MOF_COMPILER->theErrorHandler->fatalError("Unterminated Comment",
		MOF_COMPILER->theLineInfo);
	yyterminate();
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 140 "OW_MOFLexer.ll"
BEGIN(CPPcomment);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 141 "OW_MOFLexer.ll"
/* eat anything but newline */
	YY_BREAK
case 10:
/* rule 10 can match eol */
YY_RULE_SETUP
#line 142 "OW_MOFLexer.ll"
++MOF_COMPILER->theLineInfo.lineNum; BEGIN(INITIAL);
	YY_BREAK
case 11:
/* rule 11 can match eol */
YY_RULE_SETUP
#line 143 "OW_MOFLexer.ll"
++MOF_COMPILER->theLineInfo.lineNum; BEGIN(INITIAL);
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 144 "OW_MOFLexer.ll"
++MOF_COMPILER->theLineInfo.lineNum; BEGIN(INITIAL);
	YY_BREAK
/* Shame on whoever put special cases in the mof lexical specs and
	didn't even document it! */
case 13:
YY_RULE_SETUP
#line 148 "OW_MOFLexer.ll"
/* eat up whitespace */
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 149 "OW_MOFLexer.ll"
{BEGIN(INITIAL);RETURN_STR(IDENTIFIER_TOK);}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 151 "OW_MOFLexer.ll"
/* skip blanks and tabs */
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 152 "OW_MOFLexer.ll"
++MOF_COMPILER->theLineInfo.lineNum;
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 153 "OW_MOFLexer.ll"
++MOF_COMPILER->theLineInfo.lineNum;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 154 "OW_MOFLexer.ll"
++MOF_COMPILER->theLineInfo.lineNum;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 156 "OW_MOFLexer.ll"
{RETURN_STR(ANY_TOK);}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 157 "OW_MOFLexer.ll"
{RETURN_STR(AS_TOK);}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 158 "OW_MOFLexer.ll"
{RETURN_STR(ASSOCIATION_TOK);}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 159 "OW_MOFLexer.ll"
{RETURN_STR(CLASS_TOK);}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 160 "OW_MOFLexer.ll"
{RETURN_STR(DISABLEOVERRIDE_TOK);}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 161 "OW_MOFLexer.ll"
{RETURN_STR(DT_BOOL_TOK);}
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 162 "OW_MOFLexer.ll"
{RETURN_STR(DT_CHAR16_TOK);}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 163 "OW_MOFLexer.ll"
{RETURN_STR(DT_DATETIME_TOK);}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 164 "OW_MOFLexer.ll"
{RETURN_STR(DT_REAL32_TOK);}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 165 "OW_MOFLexer.ll"
{RETURN_STR(DT_REAL64_TOK);}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 166 "OW_MOFLexer.ll"
{RETURN_STR(DT_SINT16_TOK);}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 167 "OW_MOFLexer.ll"
{RETURN_STR(DT_SINT32_TOK);}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 168 "OW_MOFLexer.ll"
{RETURN_STR(DT_SINT64_TOK);}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 169 "OW_MOFLexer.ll"
{RETURN_STR(DT_SINT8_TOK);}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 170 "OW_MOFLexer.ll"
{RETURN_STR(DT_STR_TOK);}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 171 "OW_MOFLexer.ll"
{RETURN_STR(DT_UINT16_TOK);}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 172 "OW_MOFLexer.ll"
{RETURN_STR(DT_UINT32_TOK);}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 173 "OW_MOFLexer.ll"
{RETURN_STR(DT_UINT64_TOK);}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 174 "OW_MOFLexer.ll"
{RETURN_STR(DT_UINT8_TOK);}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 175 "OW_MOFLexer.ll"
{RETURN_STR(ENABLEOVERRIDE_TOK);}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 176 "OW_MOFLexer.ll"
{RETURN_STR(FALSE_TOK);}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 177 "OW_MOFLexer.ll"
{RETURN_STR(FLAVOR_TOK);}
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 178 "OW_MOFLexer.ll"
{RETURN_STR(INDICATION_TOK);}
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 179 "OW_MOFLexer.ll"
{RETURN_STR(INSTANCE_TOK);}
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 180 "OW_MOFLexer.ll"
{RETURN_STR(METHOD_TOK);}
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 181 "OW_MOFLexer.ll"
{RETURN_STR(NULL_TOK);}
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 182 "OW_MOFLexer.ll"
{RETURN_STR(OF_TOK);}
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 183 "OW_MOFLexer.ll"
{RETURN_STR(PARAMETER_TOK);}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 184 "OW_MOFLexer.ll"
{RETURN_STR(PRAGMA_TOK);}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 185 "OW_MOFLexer.ll"
{RETURN_STR(PROPERTY_TOK);}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 186 "OW_MOFLexer.ll"
{BEGIN(OnlyIdentifier); RETURN_STR(QUALIFIER_TOK);}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 187 "OW_MOFLexer.ll"
{RETURN_VAL(REF_TOK);}
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 188 "OW_MOFLexer.ll"
{RETURN_STR(REFERENCE_TOK);}
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 189 "OW_MOFLexer.ll"
{RETURN_STR(RESTRICTED_TOK);}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 190 "OW_MOFLexer.ll"
{RETURN_STR(SCHEMA_TOK);}
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 191 "OW_MOFLexer.ll"
{RETURN_STR(SCOPE_TOK);}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 192 "OW_MOFLexer.ll"
{RETURN_STR(TOSUBCLASS_TOK);}
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 193 "OW_MOFLexer.ll"
{RETURN_STR(TRANSLATABLE_TOK);}
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 194 "OW_MOFLexer.ll"
{RETURN_STR(TRUE_TOK);}
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 195 "OW_MOFLexer.ll"
{RETURN_VAL(LPAREN_TOK);}
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 196 "OW_MOFLexer.ll"
{RETURN_VAL(RPAREN_TOK);}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 197 "OW_MOFLexer.ll"
{RETURN_VAL(LBRACE_TOK);}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 198 "OW_MOFLexer.ll"
{RETURN_VAL(RBRACE_TOK);}
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 199 "OW_MOFLexer.ll"
{RETURN_VAL(SEMICOLON_TOK);}
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 200 "OW_MOFLexer.ll"
{RETURN_VAL(LBRACK_TOK);}
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 201 "OW_MOFLexer.ll"
{RETURN_VAL(RBRACK_TOK);}
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 202 "OW_MOFLexer.ll"
{RETURN_VAL(COMMA_TOK);}
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 203 "OW_MOFLexer.ll"
{RETURN_VAL(DOLLAR_TOK);}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 204 "OW_MOFLexer.ll"
{RETURN_VAL(COLON_TOK);}
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 205 "OW_MOFLexer.ll"
{RETURN_VAL(EQUALS_TOK);}
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 209 "OW_MOFLexer.ll"
{RETURN_STR(binaryValue);}
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 211 "OW_MOFLexer.ll"
{RETURN_STR(octalValue);}
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 213 "OW_MOFLexer.ll"
{RETURN_STR(decimalValue);}
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 215 "OW_MOFLexer.ll"
{RETURN_STR(hexValue);}
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 217 "OW_MOFLexer.ll"
{RETURN_STR(floatValue);}
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 219 "OW_MOFLexer.ll"
{RETURN_STR(charValue);}
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 221 "OW_MOFLexer.ll"
{ RETURN_STR(stringValue);}
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 223 "OW_MOFLexer.ll"
{RETURN_STR(IDENTIFIER_TOK);}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(CPPcomment):
case YY_STATE_EOF(OnlyIdentifier):
#line 225 "OW_MOFLexer.ll"
{
	if ( --(MOF_COMPILER->include_stack_ptr) < 0 )
	{
		yyterminate();
	}
	else
	{
		owmof_delete_buffer( YY_CURRENT_BUFFER );
		/* flex doesn't ever close the file handles.  If we don't free them up, on HPUX where we're limited to 60 files, you can't import the CIM schema! */
		if (owmofin != NULL && owmofin != stdin)
		{
			fclose(owmofin);
		}
		MOF_COMPILER->theErrorHandler->progressMessage("Finished parsing.", MOF_COMPILER->theLineInfo);
		MOF_COMPILER->theLineInfo = MOF_COMPILER->include_stack[MOF_COMPILER->include_stack_ptr].theLineInfo;
		owmof_switch_to_buffer(
			MOF_COMPILER->include_stack[MOF_COMPILER->include_stack_ptr].owmofBufferState );
	}
}
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 245 "OW_MOFLexer.ll"
ECHO;
	YY_BREAK
#line 5221 "OW_MOFLexer.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed owmofin at a new source and called
			 * owmoflex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = owmofin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( owmofwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * owmoftext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of owmoflex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					owmofrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			owmofrestart(owmofin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		yy_current_state = yy_nxt[yy_current_state][(*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1)];
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	yy_current_state = yy_nxt[yy_current_state][1];
	yy_is_jam = (yy_current_state <= 0);

	if ( ! yy_is_jam )
		{
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		}

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up owmoftext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					owmofrestart(owmofin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( owmofwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve owmoftext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void owmofrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        owmofensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            owmof_create_buffer(owmofin,YY_BUF_SIZE );
	}

	owmof_init_buffer(YY_CURRENT_BUFFER,input_file );
	owmof_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void owmof_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		owmofpop_buffer_state();
	 *		owmofpush_buffer_state(new_buffer);
     */
	owmofensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	owmof_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (owmofwrap()) processing, but the only time this flag
	 * is looked at is after owmofwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void owmof_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	owmofin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE owmof_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) owmofalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in owmof_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) owmofalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in owmof_create_buffer()" );

	b->yy_is_our_buffer = 1;

	owmof_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with owmof_create_buffer()
 * 
 */
    void owmof_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		owmoffree((void *) b->yy_ch_buf  );

	owmoffree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a owmofrestart() or at EOF.
 */
    static void owmof_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	owmof_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then owmof_init_buffer was _probably_
     * called from owmofrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void owmof_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		owmof_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void owmofpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	owmofensure_buffer_stack();

	/* This block is copied from owmof_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from owmof_switch_to_buffer. */
	owmof_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void owmofpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	owmof_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		owmof_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void owmofensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)owmofalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)owmofrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE owmof_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) owmofalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in owmof_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	owmof_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to owmoflex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       owmof_scan_bytes() instead.
 */
YY_BUFFER_STATE owmof_scan_string (yyconst char * str )
{
    
	return owmof_scan_bytes(str,strlen(str) );
}

/** Setup the input buffer state to scan the given bytes. The next call to owmoflex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE owmof_scan_bytes  (yyconst char * bytes, int  len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) owmofalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in owmof_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = owmof_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in owmof_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up owmoftext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		owmoftext[owmofleng] = (yy_hold_char); \
		(yy_c_buf_p) = owmoftext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		owmofleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the input stream.
 * 
 */
FILE *owmofget_in  (void)
{
        return owmofin;
}

/** Get the output stream.
 * 
 */
FILE *owmofget_out  (void)
{
        return owmofout;
}

/** Get the length of the current token.
 * 
 */
int owmofget_leng  (void)
{
        return owmofleng;
}

/** Get the current token.
 * 
 */

char *owmofget_text  (void)
{
        return owmoftext;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see owmof_switch_to_buffer
 */
void owmofset_in (FILE *  in_str )
{
        owmofin = in_str ;
}

void owmofset_out (FILE *  out_str )
{
        owmofout = out_str ;
}

int owmofget_debug  (void)
{
        return owmof_flex_debug;
}

void owmofset_debug (int  bdebug )
{
        owmof_flex_debug = bdebug ;
}

/* owmoflex_destroy is for both reentrant and non-reentrant scanners. */
int owmoflex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		owmof_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		owmofpop_buffer_state();
	}

	/* Destroy the stack itself. */
	owmoffree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
    	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
    	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *owmofalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *owmofrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void owmoffree (void * ptr )
{
	free( (char *) ptr );	/* see owmofrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 245 "OW_MOFLexer.ll"


/* here is the user code */

void lexIncludeFile( void* context, const String& filename )
{
	if ( MOF_COMPILER->include_stack_ptr >= Compiler::E_MAX_INCLUDE_DEPTH )
	{
		// REPORT AN ERROR
		MOF_COMPILER->theErrorHandler->fatalError(
			Format("Includes nested too deep (Max of %1 levels)", (int)Compiler::E_MAX_INCLUDE_DEPTH).c_str(),
			MOF_COMPILER->theLineInfo);
		return;
	}

	// first try to find the file in the same dir as our original file.
	String filenameWithPath = MOF_COMPILER->basepath + "/" + filename;
	FILE* newfile = fopen( filenameWithPath.c_str(), "r" );

	if ( !newfile )
	{
		// try to find it in the current dir
		newfile = fopen( filename.c_str(), "r" );
		if ( !newfile )
		{
			MOF_COMPILER->theErrorHandler->fatalError(
				Format("Could not open include file %1: %2(%3)", filename, errno, strerror(errno)).c_str(), MOF_COMPILER->theLineInfo);
			return;
		}
		filenameWithPath = filename;
	}
	
	owmofin = newfile;
	MOF_COMPILER->include_stack[MOF_COMPILER->include_stack_ptr].owmofBufferState = YY_CURRENT_BUFFER;
	MOF_COMPILER->include_stack[MOF_COMPILER->include_stack_ptr].theLineInfo = MOF_COMPILER->theLineInfo;
	MOF_COMPILER->theLineInfo.filename = filenameWithPath;
	MOF_COMPILER->theLineInfo.lineNum = 1;
	MOF_COMPILER->theErrorHandler->progressMessage("Starting parsing.", MOF_COMPILER->theLineInfo);
	
	++(MOF_COMPILER->include_stack_ptr);

	owmof_switch_to_buffer( owmof_create_buffer( owmofin, YY_BUF_SIZE ) );

}


